// Code generated by counterfeiter. DO NOT EDIT.
package fakes

import (
	"sync"

	"github.com/lubronzhan/on-demand-service-broker/broker"
	"github.com/lubronzhan/on-demand-service-broker/task"
)

type FakeBulkSetter struct {
	BulkSetStub        func([]broker.ManifestSecret) error
	bulkSetMutex       sync.RWMutex
	bulkSetArgsForCall []struct {
		arg1 []broker.ManifestSecret
	}
	bulkSetReturns struct {
		result1 error
	}
	bulkSetReturnsOnCall map[int]struct {
		result1 error
	}
	invocations      map[string][][]interface{}
	invocationsMutex sync.RWMutex
}

func (fake *FakeBulkSetter) BulkSet(arg1 []broker.ManifestSecret) error {
	var arg1Copy []broker.ManifestSecret
	if arg1 != nil {
		arg1Copy = make([]broker.ManifestSecret, len(arg1))
		copy(arg1Copy, arg1)
	}
	fake.bulkSetMutex.Lock()
	ret, specificReturn := fake.bulkSetReturnsOnCall[len(fake.bulkSetArgsForCall)]
	fake.bulkSetArgsForCall = append(fake.bulkSetArgsForCall, struct {
		arg1 []broker.ManifestSecret
	}{arg1Copy})
	fake.recordInvocation("BulkSet", []interface{}{arg1Copy})
	fake.bulkSetMutex.Unlock()
	if fake.BulkSetStub != nil {
		return fake.BulkSetStub(arg1)
	}
	if specificReturn {
		return ret.result1
	}
	fakeReturns := fake.bulkSetReturns
	return fakeReturns.result1
}

func (fake *FakeBulkSetter) BulkSetCallCount() int {
	fake.bulkSetMutex.RLock()
	defer fake.bulkSetMutex.RUnlock()
	return len(fake.bulkSetArgsForCall)
}

func (fake *FakeBulkSetter) BulkSetCalls(stub func([]broker.ManifestSecret) error) {
	fake.bulkSetMutex.Lock()
	defer fake.bulkSetMutex.Unlock()
	fake.BulkSetStub = stub
}

func (fake *FakeBulkSetter) BulkSetArgsForCall(i int) []broker.ManifestSecret {
	fake.bulkSetMutex.RLock()
	defer fake.bulkSetMutex.RUnlock()
	argsForCall := fake.bulkSetArgsForCall[i]
	return argsForCall.arg1
}

func (fake *FakeBulkSetter) BulkSetReturns(result1 error) {
	fake.bulkSetMutex.Lock()
	defer fake.bulkSetMutex.Unlock()
	fake.BulkSetStub = nil
	fake.bulkSetReturns = struct {
		result1 error
	}{result1}
}

func (fake *FakeBulkSetter) BulkSetReturnsOnCall(i int, result1 error) {
	fake.bulkSetMutex.Lock()
	defer fake.bulkSetMutex.Unlock()
	fake.BulkSetStub = nil
	if fake.bulkSetReturnsOnCall == nil {
		fake.bulkSetReturnsOnCall = make(map[int]struct {
			result1 error
		})
	}
	fake.bulkSetReturnsOnCall[i] = struct {
		result1 error
	}{result1}
}

func (fake *FakeBulkSetter) Invocations() map[string][][]interface{} {
	fake.invocationsMutex.RLock()
	defer fake.invocationsMutex.RUnlock()
	fake.bulkSetMutex.RLock()
	defer fake.bulkSetMutex.RUnlock()
	copiedInvocations := map[string][][]interface{}{}
	for key, value := range fake.invocations {
		copiedInvocations[key] = value
	}
	return copiedInvocations
}

func (fake *FakeBulkSetter) recordInvocation(key string, args []interface{}) {
	fake.invocationsMutex.Lock()
	defer fake.invocationsMutex.Unlock()
	if fake.invocations == nil {
		fake.invocations = map[string][][]interface{}{}
	}
	if fake.invocations[key] == nil {
		fake.invocations[key] = [][]interface{}{}
	}
	fake.invocations[key] = append(fake.invocations[key], args)
}

var _ task.BulkSetter = new(FakeBulkSetter)

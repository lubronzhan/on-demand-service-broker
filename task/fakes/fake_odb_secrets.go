// Code generated by counterfeiter. DO NOT EDIT.
package fakes

import (
	"sync"

	"github.com/lubronzhan/on-demand-service-broker/broker"
	"github.com/lubronzhan/on-demand-service-broker/task"
	"github.com/pivotal-cf/on-demand-services-sdk/serviceadapter"
)

type FakeODBSecrets struct {
	GenerateSecretPathsStub        func(string, string, serviceadapter.ODBManagedSecrets) []broker.ManifestSecret
	generateSecretPathsMutex       sync.RWMutex
	generateSecretPathsArgsForCall []struct {
		arg1 string
		arg2 string
		arg3 serviceadapter.ODBManagedSecrets
	}
	generateSecretPathsReturns struct {
		result1 []broker.ManifestSecret
	}
	generateSecretPathsReturnsOnCall map[int]struct {
		result1 []broker.ManifestSecret
	}
	ReplaceODBRefsStub        func(string, []broker.ManifestSecret) string
	replaceODBRefsMutex       sync.RWMutex
	replaceODBRefsArgsForCall []struct {
		arg1 string
		arg2 []broker.ManifestSecret
	}
	replaceODBRefsReturns struct {
		result1 string
	}
	replaceODBRefsReturnsOnCall map[int]struct {
		result1 string
	}
	invocations      map[string][][]interface{}
	invocationsMutex sync.RWMutex
}

func (fake *FakeODBSecrets) GenerateSecretPaths(arg1 string, arg2 string, arg3 serviceadapter.ODBManagedSecrets) []broker.ManifestSecret {
	fake.generateSecretPathsMutex.Lock()
	ret, specificReturn := fake.generateSecretPathsReturnsOnCall[len(fake.generateSecretPathsArgsForCall)]
	fake.generateSecretPathsArgsForCall = append(fake.generateSecretPathsArgsForCall, struct {
		arg1 string
		arg2 string
		arg3 serviceadapter.ODBManagedSecrets
	}{arg1, arg2, arg3})
	fake.recordInvocation("GenerateSecretPaths", []interface{}{arg1, arg2, arg3})
	fake.generateSecretPathsMutex.Unlock()
	if fake.GenerateSecretPathsStub != nil {
		return fake.GenerateSecretPathsStub(arg1, arg2, arg3)
	}
	if specificReturn {
		return ret.result1
	}
	fakeReturns := fake.generateSecretPathsReturns
	return fakeReturns.result1
}

func (fake *FakeODBSecrets) GenerateSecretPathsCallCount() int {
	fake.generateSecretPathsMutex.RLock()
	defer fake.generateSecretPathsMutex.RUnlock()
	return len(fake.generateSecretPathsArgsForCall)
}

func (fake *FakeODBSecrets) GenerateSecretPathsCalls(stub func(string, string, serviceadapter.ODBManagedSecrets) []broker.ManifestSecret) {
	fake.generateSecretPathsMutex.Lock()
	defer fake.generateSecretPathsMutex.Unlock()
	fake.GenerateSecretPathsStub = stub
}

func (fake *FakeODBSecrets) GenerateSecretPathsArgsForCall(i int) (string, string, serviceadapter.ODBManagedSecrets) {
	fake.generateSecretPathsMutex.RLock()
	defer fake.generateSecretPathsMutex.RUnlock()
	argsForCall := fake.generateSecretPathsArgsForCall[i]
	return argsForCall.arg1, argsForCall.arg2, argsForCall.arg3
}

func (fake *FakeODBSecrets) GenerateSecretPathsReturns(result1 []broker.ManifestSecret) {
	fake.generateSecretPathsMutex.Lock()
	defer fake.generateSecretPathsMutex.Unlock()
	fake.GenerateSecretPathsStub = nil
	fake.generateSecretPathsReturns = struct {
		result1 []broker.ManifestSecret
	}{result1}
}

func (fake *FakeODBSecrets) GenerateSecretPathsReturnsOnCall(i int, result1 []broker.ManifestSecret) {
	fake.generateSecretPathsMutex.Lock()
	defer fake.generateSecretPathsMutex.Unlock()
	fake.GenerateSecretPathsStub = nil
	if fake.generateSecretPathsReturnsOnCall == nil {
		fake.generateSecretPathsReturnsOnCall = make(map[int]struct {
			result1 []broker.ManifestSecret
		})
	}
	fake.generateSecretPathsReturnsOnCall[i] = struct {
		result1 []broker.ManifestSecret
	}{result1}
}

func (fake *FakeODBSecrets) ReplaceODBRefs(arg1 string, arg2 []broker.ManifestSecret) string {
	var arg2Copy []broker.ManifestSecret
	if arg2 != nil {
		arg2Copy = make([]broker.ManifestSecret, len(arg2))
		copy(arg2Copy, arg2)
	}
	fake.replaceODBRefsMutex.Lock()
	ret, specificReturn := fake.replaceODBRefsReturnsOnCall[len(fake.replaceODBRefsArgsForCall)]
	fake.replaceODBRefsArgsForCall = append(fake.replaceODBRefsArgsForCall, struct {
		arg1 string
		arg2 []broker.ManifestSecret
	}{arg1, arg2Copy})
	fake.recordInvocation("ReplaceODBRefs", []interface{}{arg1, arg2Copy})
	fake.replaceODBRefsMutex.Unlock()
	if fake.ReplaceODBRefsStub != nil {
		return fake.ReplaceODBRefsStub(arg1, arg2)
	}
	if specificReturn {
		return ret.result1
	}
	fakeReturns := fake.replaceODBRefsReturns
	return fakeReturns.result1
}

func (fake *FakeODBSecrets) ReplaceODBRefsCallCount() int {
	fake.replaceODBRefsMutex.RLock()
	defer fake.replaceODBRefsMutex.RUnlock()
	return len(fake.replaceODBRefsArgsForCall)
}

func (fake *FakeODBSecrets) ReplaceODBRefsCalls(stub func(string, []broker.ManifestSecret) string) {
	fake.replaceODBRefsMutex.Lock()
	defer fake.replaceODBRefsMutex.Unlock()
	fake.ReplaceODBRefsStub = stub
}

func (fake *FakeODBSecrets) ReplaceODBRefsArgsForCall(i int) (string, []broker.ManifestSecret) {
	fake.replaceODBRefsMutex.RLock()
	defer fake.replaceODBRefsMutex.RUnlock()
	argsForCall := fake.replaceODBRefsArgsForCall[i]
	return argsForCall.arg1, argsForCall.arg2
}

func (fake *FakeODBSecrets) ReplaceODBRefsReturns(result1 string) {
	fake.replaceODBRefsMutex.Lock()
	defer fake.replaceODBRefsMutex.Unlock()
	fake.ReplaceODBRefsStub = nil
	fake.replaceODBRefsReturns = struct {
		result1 string
	}{result1}
}

func (fake *FakeODBSecrets) ReplaceODBRefsReturnsOnCall(i int, result1 string) {
	fake.replaceODBRefsMutex.Lock()
	defer fake.replaceODBRefsMutex.Unlock()
	fake.ReplaceODBRefsStub = nil
	if fake.replaceODBRefsReturnsOnCall == nil {
		fake.replaceODBRefsReturnsOnCall = make(map[int]struct {
			result1 string
		})
	}
	fake.replaceODBRefsReturnsOnCall[i] = struct {
		result1 string
	}{result1}
}

func (fake *FakeODBSecrets) Invocations() map[string][][]interface{} {
	fake.invocationsMutex.RLock()
	defer fake.invocationsMutex.RUnlock()
	fake.generateSecretPathsMutex.RLock()
	defer fake.generateSecretPathsMutex.RUnlock()
	fake.replaceODBRefsMutex.RLock()
	defer fake.replaceODBRefsMutex.RUnlock()
	copiedInvocations := map[string][][]interface{}{}
	for key, value := range fake.invocations {
		copiedInvocations[key] = value
	}
	return copiedInvocations
}

func (fake *FakeODBSecrets) recordInvocation(key string, args []interface{}) {
	fake.invocationsMutex.Lock()
	defer fake.invocationsMutex.Unlock()
	if fake.invocations == nil {
		fake.invocations = map[string][][]interface{}{}
	}
	if fake.invocations[key] == nil {
		fake.invocations[key] = [][]interface{}{}
	}
	fake.invocations[key] = append(fake.invocations[key], args)
}

var _ task.ODBSecrets = new(FakeODBSecrets)

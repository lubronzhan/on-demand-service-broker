// Code generated by counterfeiter. DO NOT EDIT.
package fakes

import (
	"log"
	"sync"

	"github.com/lubronzhan/on-demand-service-broker/cf"
	"github.com/lubronzhan/on-demand-service-broker/startupchecker"
)

type FakeServiceInstanceCounter struct {
	CountInstancesOfServiceOfferingStub        func(string, *log.Logger) (map[cf.ServicePlan]int, error)
	countInstancesOfServiceOfferingMutex       sync.RWMutex
	countInstancesOfServiceOfferingArgsForCall []struct {
		arg1 string
		arg2 *log.Logger
	}
	countInstancesOfServiceOfferingReturns struct {
		result1 map[cf.ServicePlan]int
		result2 error
	}
	countInstancesOfServiceOfferingReturnsOnCall map[int]struct {
		result1 map[cf.ServicePlan]int
		result2 error
	}
	invocations      map[string][][]interface{}
	invocationsMutex sync.RWMutex
}

func (fake *FakeServiceInstanceCounter) CountInstancesOfServiceOffering(arg1 string, arg2 *log.Logger) (map[cf.ServicePlan]int, error) {
	fake.countInstancesOfServiceOfferingMutex.Lock()
	ret, specificReturn := fake.countInstancesOfServiceOfferingReturnsOnCall[len(fake.countInstancesOfServiceOfferingArgsForCall)]
	fake.countInstancesOfServiceOfferingArgsForCall = append(fake.countInstancesOfServiceOfferingArgsForCall, struct {
		arg1 string
		arg2 *log.Logger
	}{arg1, arg2})
	fake.recordInvocation("CountInstancesOfServiceOffering", []interface{}{arg1, arg2})
	fake.countInstancesOfServiceOfferingMutex.Unlock()
	if fake.CountInstancesOfServiceOfferingStub != nil {
		return fake.CountInstancesOfServiceOfferingStub(arg1, arg2)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	fakeReturns := fake.countInstancesOfServiceOfferingReturns
	return fakeReturns.result1, fakeReturns.result2
}

func (fake *FakeServiceInstanceCounter) CountInstancesOfServiceOfferingCallCount() int {
	fake.countInstancesOfServiceOfferingMutex.RLock()
	defer fake.countInstancesOfServiceOfferingMutex.RUnlock()
	return len(fake.countInstancesOfServiceOfferingArgsForCall)
}

func (fake *FakeServiceInstanceCounter) CountInstancesOfServiceOfferingCalls(stub func(string, *log.Logger) (map[cf.ServicePlan]int, error)) {
	fake.countInstancesOfServiceOfferingMutex.Lock()
	defer fake.countInstancesOfServiceOfferingMutex.Unlock()
	fake.CountInstancesOfServiceOfferingStub = stub
}

func (fake *FakeServiceInstanceCounter) CountInstancesOfServiceOfferingArgsForCall(i int) (string, *log.Logger) {
	fake.countInstancesOfServiceOfferingMutex.RLock()
	defer fake.countInstancesOfServiceOfferingMutex.RUnlock()
	argsForCall := fake.countInstancesOfServiceOfferingArgsForCall[i]
	return argsForCall.arg1, argsForCall.arg2
}

func (fake *FakeServiceInstanceCounter) CountInstancesOfServiceOfferingReturns(result1 map[cf.ServicePlan]int, result2 error) {
	fake.countInstancesOfServiceOfferingMutex.Lock()
	defer fake.countInstancesOfServiceOfferingMutex.Unlock()
	fake.CountInstancesOfServiceOfferingStub = nil
	fake.countInstancesOfServiceOfferingReturns = struct {
		result1 map[cf.ServicePlan]int
		result2 error
	}{result1, result2}
}

func (fake *FakeServiceInstanceCounter) CountInstancesOfServiceOfferingReturnsOnCall(i int, result1 map[cf.ServicePlan]int, result2 error) {
	fake.countInstancesOfServiceOfferingMutex.Lock()
	defer fake.countInstancesOfServiceOfferingMutex.Unlock()
	fake.CountInstancesOfServiceOfferingStub = nil
	if fake.countInstancesOfServiceOfferingReturnsOnCall == nil {
		fake.countInstancesOfServiceOfferingReturnsOnCall = make(map[int]struct {
			result1 map[cf.ServicePlan]int
			result2 error
		})
	}
	fake.countInstancesOfServiceOfferingReturnsOnCall[i] = struct {
		result1 map[cf.ServicePlan]int
		result2 error
	}{result1, result2}
}

func (fake *FakeServiceInstanceCounter) Invocations() map[string][][]interface{} {
	fake.invocationsMutex.RLock()
	defer fake.invocationsMutex.RUnlock()
	fake.countInstancesOfServiceOfferingMutex.RLock()
	defer fake.countInstancesOfServiceOfferingMutex.RUnlock()
	copiedInvocations := map[string][][]interface{}{}
	for key, value := range fake.invocations {
		copiedInvocations[key] = value
	}
	return copiedInvocations
}

func (fake *FakeServiceInstanceCounter) recordInvocation(key string, args []interface{}) {
	fake.invocationsMutex.Lock()
	defer fake.invocationsMutex.Unlock()
	if fake.invocations == nil {
		fake.invocations = map[string][][]interface{}{}
	}
	if fake.invocations[key] == nil {
		fake.invocations[key] = [][]interface{}{}
	}
	fake.invocations[key] = append(fake.invocations[key], args)
}

var _ startupchecker.ServiceInstanceCounter = new(FakeServiceInstanceCounter)

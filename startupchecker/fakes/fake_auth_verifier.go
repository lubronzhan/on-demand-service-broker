// Code generated by counterfeiter. DO NOT EDIT.
package fakes

import (
	"log"
	"sync"

	"github.com/lubronzhan/on-demand-service-broker/startupchecker"
)

type FakeAuthVerifier struct {
	VerifyAuthStub        func(*log.Logger) error
	verifyAuthMutex       sync.RWMutex
	verifyAuthArgsForCall []struct {
		arg1 *log.Logger
	}
	verifyAuthReturns struct {
		result1 error
	}
	verifyAuthReturnsOnCall map[int]struct {
		result1 error
	}
	invocations      map[string][][]interface{}
	invocationsMutex sync.RWMutex
}

func (fake *FakeAuthVerifier) VerifyAuth(arg1 *log.Logger) error {
	fake.verifyAuthMutex.Lock()
	ret, specificReturn := fake.verifyAuthReturnsOnCall[len(fake.verifyAuthArgsForCall)]
	fake.verifyAuthArgsForCall = append(fake.verifyAuthArgsForCall, struct {
		arg1 *log.Logger
	}{arg1})
	fake.recordInvocation("VerifyAuth", []interface{}{arg1})
	fake.verifyAuthMutex.Unlock()
	if fake.VerifyAuthStub != nil {
		return fake.VerifyAuthStub(arg1)
	}
	if specificReturn {
		return ret.result1
	}
	fakeReturns := fake.verifyAuthReturns
	return fakeReturns.result1
}

func (fake *FakeAuthVerifier) VerifyAuthCallCount() int {
	fake.verifyAuthMutex.RLock()
	defer fake.verifyAuthMutex.RUnlock()
	return len(fake.verifyAuthArgsForCall)
}

func (fake *FakeAuthVerifier) VerifyAuthCalls(stub func(*log.Logger) error) {
	fake.verifyAuthMutex.Lock()
	defer fake.verifyAuthMutex.Unlock()
	fake.VerifyAuthStub = stub
}

func (fake *FakeAuthVerifier) VerifyAuthArgsForCall(i int) *log.Logger {
	fake.verifyAuthMutex.RLock()
	defer fake.verifyAuthMutex.RUnlock()
	argsForCall := fake.verifyAuthArgsForCall[i]
	return argsForCall.arg1
}

func (fake *FakeAuthVerifier) VerifyAuthReturns(result1 error) {
	fake.verifyAuthMutex.Lock()
	defer fake.verifyAuthMutex.Unlock()
	fake.VerifyAuthStub = nil
	fake.verifyAuthReturns = struct {
		result1 error
	}{result1}
}

func (fake *FakeAuthVerifier) VerifyAuthReturnsOnCall(i int, result1 error) {
	fake.verifyAuthMutex.Lock()
	defer fake.verifyAuthMutex.Unlock()
	fake.VerifyAuthStub = nil
	if fake.verifyAuthReturnsOnCall == nil {
		fake.verifyAuthReturnsOnCall = make(map[int]struct {
			result1 error
		})
	}
	fake.verifyAuthReturnsOnCall[i] = struct {
		result1 error
	}{result1}
}

func (fake *FakeAuthVerifier) Invocations() map[string][][]interface{} {
	fake.invocationsMutex.RLock()
	defer fake.invocationsMutex.RUnlock()
	fake.verifyAuthMutex.RLock()
	defer fake.verifyAuthMutex.RUnlock()
	copiedInvocations := map[string][][]interface{}{}
	for key, value := range fake.invocations {
		copiedInvocations[key] = value
	}
	return copiedInvocations
}

func (fake *FakeAuthVerifier) recordInvocation(key string, args []interface{}) {
	fake.invocationsMutex.Lock()
	defer fake.invocationsMutex.Unlock()
	if fake.invocations == nil {
		fake.invocations = map[string][][]interface{}{}
	}
	if fake.invocations[key] == nil {
		fake.invocations[key] = [][]interface{}{}
	}
	fake.invocations[key] = append(fake.invocations[key], args)
}

var _ startupchecker.AuthVerifier = new(FakeAuthVerifier)

// Code generated by counterfeiter. DO NOT EDIT.
package fakes

import (
	"log"
	"sync"

	"github.com/lubronzhan/on-demand-service-broker/startupchecker"
)

type FakeCFAPIVersionGetter struct {
	GetAPIVersionStub        func(*log.Logger) (string, error)
	getAPIVersionMutex       sync.RWMutex
	getAPIVersionArgsForCall []struct {
		arg1 *log.Logger
	}
	getAPIVersionReturns struct {
		result1 string
		result2 error
	}
	getAPIVersionReturnsOnCall map[int]struct {
		result1 string
		result2 error
	}
	invocations      map[string][][]interface{}
	invocationsMutex sync.RWMutex
}

func (fake *FakeCFAPIVersionGetter) GetAPIVersion(arg1 *log.Logger) (string, error) {
	fake.getAPIVersionMutex.Lock()
	ret, specificReturn := fake.getAPIVersionReturnsOnCall[len(fake.getAPIVersionArgsForCall)]
	fake.getAPIVersionArgsForCall = append(fake.getAPIVersionArgsForCall, struct {
		arg1 *log.Logger
	}{arg1})
	fake.recordInvocation("GetAPIVersion", []interface{}{arg1})
	fake.getAPIVersionMutex.Unlock()
	if fake.GetAPIVersionStub != nil {
		return fake.GetAPIVersionStub(arg1)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	fakeReturns := fake.getAPIVersionReturns
	return fakeReturns.result1, fakeReturns.result2
}

func (fake *FakeCFAPIVersionGetter) GetAPIVersionCallCount() int {
	fake.getAPIVersionMutex.RLock()
	defer fake.getAPIVersionMutex.RUnlock()
	return len(fake.getAPIVersionArgsForCall)
}

func (fake *FakeCFAPIVersionGetter) GetAPIVersionCalls(stub func(*log.Logger) (string, error)) {
	fake.getAPIVersionMutex.Lock()
	defer fake.getAPIVersionMutex.Unlock()
	fake.GetAPIVersionStub = stub
}

func (fake *FakeCFAPIVersionGetter) GetAPIVersionArgsForCall(i int) *log.Logger {
	fake.getAPIVersionMutex.RLock()
	defer fake.getAPIVersionMutex.RUnlock()
	argsForCall := fake.getAPIVersionArgsForCall[i]
	return argsForCall.arg1
}

func (fake *FakeCFAPIVersionGetter) GetAPIVersionReturns(result1 string, result2 error) {
	fake.getAPIVersionMutex.Lock()
	defer fake.getAPIVersionMutex.Unlock()
	fake.GetAPIVersionStub = nil
	fake.getAPIVersionReturns = struct {
		result1 string
		result2 error
	}{result1, result2}
}

func (fake *FakeCFAPIVersionGetter) GetAPIVersionReturnsOnCall(i int, result1 string, result2 error) {
	fake.getAPIVersionMutex.Lock()
	defer fake.getAPIVersionMutex.Unlock()
	fake.GetAPIVersionStub = nil
	if fake.getAPIVersionReturnsOnCall == nil {
		fake.getAPIVersionReturnsOnCall = make(map[int]struct {
			result1 string
			result2 error
		})
	}
	fake.getAPIVersionReturnsOnCall[i] = struct {
		result1 string
		result2 error
	}{result1, result2}
}

func (fake *FakeCFAPIVersionGetter) Invocations() map[string][][]interface{} {
	fake.invocationsMutex.RLock()
	defer fake.invocationsMutex.RUnlock()
	fake.getAPIVersionMutex.RLock()
	defer fake.getAPIVersionMutex.RUnlock()
	copiedInvocations := map[string][][]interface{}{}
	for key, value := range fake.invocations {
		copiedInvocations[key] = value
	}
	return copiedInvocations
}

func (fake *FakeCFAPIVersionGetter) recordInvocation(key string, args []interface{}) {
	fake.invocationsMutex.Lock()
	defer fake.invocationsMutex.Unlock()
	if fake.invocations == nil {
		fake.invocations = map[string][][]interface{}{}
	}
	if fake.invocations[key] == nil {
		fake.invocations[key] = [][]interface{}{}
	}
	fake.invocations[key] = append(fake.invocations[key], args)
}

var _ startupchecker.CFAPIVersionGetter = new(FakeCFAPIVersionGetter)

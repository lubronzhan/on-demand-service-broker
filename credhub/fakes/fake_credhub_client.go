// Code generated by counterfeiter. DO NOT EDIT.
package fakes

import (
	"sync"

	"code.cloudfoundry.org/credhub-cli/credhub/credentials"
	"code.cloudfoundry.org/credhub-cli/credhub/credentials/values"
	"code.cloudfoundry.org/credhub-cli/credhub/permissions"
	"github.com/lubronzhan/on-demand-service-broker/credhub"
)

type FakeCredhubClient struct {
	AddPermissionStub        func(string, string, []string) (*permissions.Permission, error)
	addPermissionMutex       sync.RWMutex
	addPermissionArgsForCall []struct {
		arg1 string
		arg2 string
		arg3 []string
	}
	addPermissionReturns struct {
		result1 *permissions.Permission
		result2 error
	}
	addPermissionReturnsOnCall map[int]struct {
		result1 *permissions.Permission
		result2 error
	}
	DeleteStub        func(string) error
	deleteMutex       sync.RWMutex
	deleteArgsForCall []struct {
		arg1 string
	}
	deleteReturns struct {
		result1 error
	}
	deleteReturnsOnCall map[int]struct {
		result1 error
	}
	FindByPartialNameStub        func(string) (credentials.FindResults, error)
	findByPartialNameMutex       sync.RWMutex
	findByPartialNameArgsForCall []struct {
		arg1 string
	}
	findByPartialNameReturns struct {
		result1 credentials.FindResults
		result2 error
	}
	findByPartialNameReturnsOnCall map[int]struct {
		result1 credentials.FindResults
		result2 error
	}
	GetByIdStub        func(string) (credentials.Credential, error)
	getByIdMutex       sync.RWMutex
	getByIdArgsForCall []struct {
		arg1 string
	}
	getByIdReturns struct {
		result1 credentials.Credential
		result2 error
	}
	getByIdReturnsOnCall map[int]struct {
		result1 credentials.Credential
		result2 error
	}
	GetLatestVersionStub        func(string) (credentials.Credential, error)
	getLatestVersionMutex       sync.RWMutex
	getLatestVersionArgsForCall []struct {
		arg1 string
	}
	getLatestVersionReturns struct {
		result1 credentials.Credential
		result2 error
	}
	getLatestVersionReturnsOnCall map[int]struct {
		result1 credentials.Credential
		result2 error
	}
	SetJSONStub        func(string, values.JSON) (credentials.JSON, error)
	setJSONMutex       sync.RWMutex
	setJSONArgsForCall []struct {
		arg1 string
		arg2 values.JSON
	}
	setJSONReturns struct {
		result1 credentials.JSON
		result2 error
	}
	setJSONReturnsOnCall map[int]struct {
		result1 credentials.JSON
		result2 error
	}
	SetValueStub        func(string, values.Value) (credentials.Value, error)
	setValueMutex       sync.RWMutex
	setValueArgsForCall []struct {
		arg1 string
		arg2 values.Value
	}
	setValueReturns struct {
		result1 credentials.Value
		result2 error
	}
	setValueReturnsOnCall map[int]struct {
		result1 credentials.Value
		result2 error
	}
	invocations      map[string][][]interface{}
	invocationsMutex sync.RWMutex
}

func (fake *FakeCredhubClient) AddPermission(arg1 string, arg2 string, arg3 []string) (*permissions.Permission, error) {
	var arg3Copy []string
	if arg3 != nil {
		arg3Copy = make([]string, len(arg3))
		copy(arg3Copy, arg3)
	}
	fake.addPermissionMutex.Lock()
	ret, specificReturn := fake.addPermissionReturnsOnCall[len(fake.addPermissionArgsForCall)]
	fake.addPermissionArgsForCall = append(fake.addPermissionArgsForCall, struct {
		arg1 string
		arg2 string
		arg3 []string
	}{arg1, arg2, arg3Copy})
	fake.recordInvocation("AddPermission", []interface{}{arg1, arg2, arg3Copy})
	fake.addPermissionMutex.Unlock()
	if fake.AddPermissionStub != nil {
		return fake.AddPermissionStub(arg1, arg2, arg3)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	fakeReturns := fake.addPermissionReturns
	return fakeReturns.result1, fakeReturns.result2
}

func (fake *FakeCredhubClient) AddPermissionCallCount() int {
	fake.addPermissionMutex.RLock()
	defer fake.addPermissionMutex.RUnlock()
	return len(fake.addPermissionArgsForCall)
}

func (fake *FakeCredhubClient) AddPermissionCalls(stub func(string, string, []string) (*permissions.Permission, error)) {
	fake.addPermissionMutex.Lock()
	defer fake.addPermissionMutex.Unlock()
	fake.AddPermissionStub = stub
}

func (fake *FakeCredhubClient) AddPermissionArgsForCall(i int) (string, string, []string) {
	fake.addPermissionMutex.RLock()
	defer fake.addPermissionMutex.RUnlock()
	argsForCall := fake.addPermissionArgsForCall[i]
	return argsForCall.arg1, argsForCall.arg2, argsForCall.arg3
}

func (fake *FakeCredhubClient) AddPermissionReturns(result1 *permissions.Permission, result2 error) {
	fake.addPermissionMutex.Lock()
	defer fake.addPermissionMutex.Unlock()
	fake.AddPermissionStub = nil
	fake.addPermissionReturns = struct {
		result1 *permissions.Permission
		result2 error
	}{result1, result2}
}

func (fake *FakeCredhubClient) AddPermissionReturnsOnCall(i int, result1 *permissions.Permission, result2 error) {
	fake.addPermissionMutex.Lock()
	defer fake.addPermissionMutex.Unlock()
	fake.AddPermissionStub = nil
	if fake.addPermissionReturnsOnCall == nil {
		fake.addPermissionReturnsOnCall = make(map[int]struct {
			result1 *permissions.Permission
			result2 error
		})
	}
	fake.addPermissionReturnsOnCall[i] = struct {
		result1 *permissions.Permission
		result2 error
	}{result1, result2}
}

func (fake *FakeCredhubClient) Delete(arg1 string) error {
	fake.deleteMutex.Lock()
	ret, specificReturn := fake.deleteReturnsOnCall[len(fake.deleteArgsForCall)]
	fake.deleteArgsForCall = append(fake.deleteArgsForCall, struct {
		arg1 string
	}{arg1})
	fake.recordInvocation("Delete", []interface{}{arg1})
	fake.deleteMutex.Unlock()
	if fake.DeleteStub != nil {
		return fake.DeleteStub(arg1)
	}
	if specificReturn {
		return ret.result1
	}
	fakeReturns := fake.deleteReturns
	return fakeReturns.result1
}

func (fake *FakeCredhubClient) DeleteCallCount() int {
	fake.deleteMutex.RLock()
	defer fake.deleteMutex.RUnlock()
	return len(fake.deleteArgsForCall)
}

func (fake *FakeCredhubClient) DeleteCalls(stub func(string) error) {
	fake.deleteMutex.Lock()
	defer fake.deleteMutex.Unlock()
	fake.DeleteStub = stub
}

func (fake *FakeCredhubClient) DeleteArgsForCall(i int) string {
	fake.deleteMutex.RLock()
	defer fake.deleteMutex.RUnlock()
	argsForCall := fake.deleteArgsForCall[i]
	return argsForCall.arg1
}

func (fake *FakeCredhubClient) DeleteReturns(result1 error) {
	fake.deleteMutex.Lock()
	defer fake.deleteMutex.Unlock()
	fake.DeleteStub = nil
	fake.deleteReturns = struct {
		result1 error
	}{result1}
}

func (fake *FakeCredhubClient) DeleteReturnsOnCall(i int, result1 error) {
	fake.deleteMutex.Lock()
	defer fake.deleteMutex.Unlock()
	fake.DeleteStub = nil
	if fake.deleteReturnsOnCall == nil {
		fake.deleteReturnsOnCall = make(map[int]struct {
			result1 error
		})
	}
	fake.deleteReturnsOnCall[i] = struct {
		result1 error
	}{result1}
}

func (fake *FakeCredhubClient) FindByPartialName(arg1 string) (credentials.FindResults, error) {
	fake.findByPartialNameMutex.Lock()
	ret, specificReturn := fake.findByPartialNameReturnsOnCall[len(fake.findByPartialNameArgsForCall)]
	fake.findByPartialNameArgsForCall = append(fake.findByPartialNameArgsForCall, struct {
		arg1 string
	}{arg1})
	fake.recordInvocation("FindByPartialName", []interface{}{arg1})
	fake.findByPartialNameMutex.Unlock()
	if fake.FindByPartialNameStub != nil {
		return fake.FindByPartialNameStub(arg1)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	fakeReturns := fake.findByPartialNameReturns
	return fakeReturns.result1, fakeReturns.result2
}

func (fake *FakeCredhubClient) FindByPartialNameCallCount() int {
	fake.findByPartialNameMutex.RLock()
	defer fake.findByPartialNameMutex.RUnlock()
	return len(fake.findByPartialNameArgsForCall)
}

func (fake *FakeCredhubClient) FindByPartialNameCalls(stub func(string) (credentials.FindResults, error)) {
	fake.findByPartialNameMutex.Lock()
	defer fake.findByPartialNameMutex.Unlock()
	fake.FindByPartialNameStub = stub
}

func (fake *FakeCredhubClient) FindByPartialNameArgsForCall(i int) string {
	fake.findByPartialNameMutex.RLock()
	defer fake.findByPartialNameMutex.RUnlock()
	argsForCall := fake.findByPartialNameArgsForCall[i]
	return argsForCall.arg1
}

func (fake *FakeCredhubClient) FindByPartialNameReturns(result1 credentials.FindResults, result2 error) {
	fake.findByPartialNameMutex.Lock()
	defer fake.findByPartialNameMutex.Unlock()
	fake.FindByPartialNameStub = nil
	fake.findByPartialNameReturns = struct {
		result1 credentials.FindResults
		result2 error
	}{result1, result2}
}

func (fake *FakeCredhubClient) FindByPartialNameReturnsOnCall(i int, result1 credentials.FindResults, result2 error) {
	fake.findByPartialNameMutex.Lock()
	defer fake.findByPartialNameMutex.Unlock()
	fake.FindByPartialNameStub = nil
	if fake.findByPartialNameReturnsOnCall == nil {
		fake.findByPartialNameReturnsOnCall = make(map[int]struct {
			result1 credentials.FindResults
			result2 error
		})
	}
	fake.findByPartialNameReturnsOnCall[i] = struct {
		result1 credentials.FindResults
		result2 error
	}{result1, result2}
}

func (fake *FakeCredhubClient) GetById(arg1 string) (credentials.Credential, error) {
	fake.getByIdMutex.Lock()
	ret, specificReturn := fake.getByIdReturnsOnCall[len(fake.getByIdArgsForCall)]
	fake.getByIdArgsForCall = append(fake.getByIdArgsForCall, struct {
		arg1 string
	}{arg1})
	fake.recordInvocation("GetById", []interface{}{arg1})
	fake.getByIdMutex.Unlock()
	if fake.GetByIdStub != nil {
		return fake.GetByIdStub(arg1)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	fakeReturns := fake.getByIdReturns
	return fakeReturns.result1, fakeReturns.result2
}

func (fake *FakeCredhubClient) GetByIdCallCount() int {
	fake.getByIdMutex.RLock()
	defer fake.getByIdMutex.RUnlock()
	return len(fake.getByIdArgsForCall)
}

func (fake *FakeCredhubClient) GetByIdCalls(stub func(string) (credentials.Credential, error)) {
	fake.getByIdMutex.Lock()
	defer fake.getByIdMutex.Unlock()
	fake.GetByIdStub = stub
}

func (fake *FakeCredhubClient) GetByIdArgsForCall(i int) string {
	fake.getByIdMutex.RLock()
	defer fake.getByIdMutex.RUnlock()
	argsForCall := fake.getByIdArgsForCall[i]
	return argsForCall.arg1
}

func (fake *FakeCredhubClient) GetByIdReturns(result1 credentials.Credential, result2 error) {
	fake.getByIdMutex.Lock()
	defer fake.getByIdMutex.Unlock()
	fake.GetByIdStub = nil
	fake.getByIdReturns = struct {
		result1 credentials.Credential
		result2 error
	}{result1, result2}
}

func (fake *FakeCredhubClient) GetByIdReturnsOnCall(i int, result1 credentials.Credential, result2 error) {
	fake.getByIdMutex.Lock()
	defer fake.getByIdMutex.Unlock()
	fake.GetByIdStub = nil
	if fake.getByIdReturnsOnCall == nil {
		fake.getByIdReturnsOnCall = make(map[int]struct {
			result1 credentials.Credential
			result2 error
		})
	}
	fake.getByIdReturnsOnCall[i] = struct {
		result1 credentials.Credential
		result2 error
	}{result1, result2}
}

func (fake *FakeCredhubClient) GetLatestVersion(arg1 string) (credentials.Credential, error) {
	fake.getLatestVersionMutex.Lock()
	ret, specificReturn := fake.getLatestVersionReturnsOnCall[len(fake.getLatestVersionArgsForCall)]
	fake.getLatestVersionArgsForCall = append(fake.getLatestVersionArgsForCall, struct {
		arg1 string
	}{arg1})
	fake.recordInvocation("GetLatestVersion", []interface{}{arg1})
	fake.getLatestVersionMutex.Unlock()
	if fake.GetLatestVersionStub != nil {
		return fake.GetLatestVersionStub(arg1)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	fakeReturns := fake.getLatestVersionReturns
	return fakeReturns.result1, fakeReturns.result2
}

func (fake *FakeCredhubClient) GetLatestVersionCallCount() int {
	fake.getLatestVersionMutex.RLock()
	defer fake.getLatestVersionMutex.RUnlock()
	return len(fake.getLatestVersionArgsForCall)
}

func (fake *FakeCredhubClient) GetLatestVersionCalls(stub func(string) (credentials.Credential, error)) {
	fake.getLatestVersionMutex.Lock()
	defer fake.getLatestVersionMutex.Unlock()
	fake.GetLatestVersionStub = stub
}

func (fake *FakeCredhubClient) GetLatestVersionArgsForCall(i int) string {
	fake.getLatestVersionMutex.RLock()
	defer fake.getLatestVersionMutex.RUnlock()
	argsForCall := fake.getLatestVersionArgsForCall[i]
	return argsForCall.arg1
}

func (fake *FakeCredhubClient) GetLatestVersionReturns(result1 credentials.Credential, result2 error) {
	fake.getLatestVersionMutex.Lock()
	defer fake.getLatestVersionMutex.Unlock()
	fake.GetLatestVersionStub = nil
	fake.getLatestVersionReturns = struct {
		result1 credentials.Credential
		result2 error
	}{result1, result2}
}

func (fake *FakeCredhubClient) GetLatestVersionReturnsOnCall(i int, result1 credentials.Credential, result2 error) {
	fake.getLatestVersionMutex.Lock()
	defer fake.getLatestVersionMutex.Unlock()
	fake.GetLatestVersionStub = nil
	if fake.getLatestVersionReturnsOnCall == nil {
		fake.getLatestVersionReturnsOnCall = make(map[int]struct {
			result1 credentials.Credential
			result2 error
		})
	}
	fake.getLatestVersionReturnsOnCall[i] = struct {
		result1 credentials.Credential
		result2 error
	}{result1, result2}
}

func (fake *FakeCredhubClient) SetJSON(arg1 string, arg2 values.JSON) (credentials.JSON, error) {
	fake.setJSONMutex.Lock()
	ret, specificReturn := fake.setJSONReturnsOnCall[len(fake.setJSONArgsForCall)]
	fake.setJSONArgsForCall = append(fake.setJSONArgsForCall, struct {
		arg1 string
		arg2 values.JSON
	}{arg1, arg2})
	fake.recordInvocation("SetJSON", []interface{}{arg1, arg2})
	fake.setJSONMutex.Unlock()
	if fake.SetJSONStub != nil {
		return fake.SetJSONStub(arg1, arg2)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	fakeReturns := fake.setJSONReturns
	return fakeReturns.result1, fakeReturns.result2
}

func (fake *FakeCredhubClient) SetJSONCallCount() int {
	fake.setJSONMutex.RLock()
	defer fake.setJSONMutex.RUnlock()
	return len(fake.setJSONArgsForCall)
}

func (fake *FakeCredhubClient) SetJSONCalls(stub func(string, values.JSON) (credentials.JSON, error)) {
	fake.setJSONMutex.Lock()
	defer fake.setJSONMutex.Unlock()
	fake.SetJSONStub = stub
}

func (fake *FakeCredhubClient) SetJSONArgsForCall(i int) (string, values.JSON) {
	fake.setJSONMutex.RLock()
	defer fake.setJSONMutex.RUnlock()
	argsForCall := fake.setJSONArgsForCall[i]
	return argsForCall.arg1, argsForCall.arg2
}

func (fake *FakeCredhubClient) SetJSONReturns(result1 credentials.JSON, result2 error) {
	fake.setJSONMutex.Lock()
	defer fake.setJSONMutex.Unlock()
	fake.SetJSONStub = nil
	fake.setJSONReturns = struct {
		result1 credentials.JSON
		result2 error
	}{result1, result2}
}

func (fake *FakeCredhubClient) SetJSONReturnsOnCall(i int, result1 credentials.JSON, result2 error) {
	fake.setJSONMutex.Lock()
	defer fake.setJSONMutex.Unlock()
	fake.SetJSONStub = nil
	if fake.setJSONReturnsOnCall == nil {
		fake.setJSONReturnsOnCall = make(map[int]struct {
			result1 credentials.JSON
			result2 error
		})
	}
	fake.setJSONReturnsOnCall[i] = struct {
		result1 credentials.JSON
		result2 error
	}{result1, result2}
}

func (fake *FakeCredhubClient) SetValue(arg1 string, arg2 values.Value) (credentials.Value, error) {
	fake.setValueMutex.Lock()
	ret, specificReturn := fake.setValueReturnsOnCall[len(fake.setValueArgsForCall)]
	fake.setValueArgsForCall = append(fake.setValueArgsForCall, struct {
		arg1 string
		arg2 values.Value
	}{arg1, arg2})
	fake.recordInvocation("SetValue", []interface{}{arg1, arg2})
	fake.setValueMutex.Unlock()
	if fake.SetValueStub != nil {
		return fake.SetValueStub(arg1, arg2)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	fakeReturns := fake.setValueReturns
	return fakeReturns.result1, fakeReturns.result2
}

func (fake *FakeCredhubClient) SetValueCallCount() int {
	fake.setValueMutex.RLock()
	defer fake.setValueMutex.RUnlock()
	return len(fake.setValueArgsForCall)
}

func (fake *FakeCredhubClient) SetValueCalls(stub func(string, values.Value) (credentials.Value, error)) {
	fake.setValueMutex.Lock()
	defer fake.setValueMutex.Unlock()
	fake.SetValueStub = stub
}

func (fake *FakeCredhubClient) SetValueArgsForCall(i int) (string, values.Value) {
	fake.setValueMutex.RLock()
	defer fake.setValueMutex.RUnlock()
	argsForCall := fake.setValueArgsForCall[i]
	return argsForCall.arg1, argsForCall.arg2
}

func (fake *FakeCredhubClient) SetValueReturns(result1 credentials.Value, result2 error) {
	fake.setValueMutex.Lock()
	defer fake.setValueMutex.Unlock()
	fake.SetValueStub = nil
	fake.setValueReturns = struct {
		result1 credentials.Value
		result2 error
	}{result1, result2}
}

func (fake *FakeCredhubClient) SetValueReturnsOnCall(i int, result1 credentials.Value, result2 error) {
	fake.setValueMutex.Lock()
	defer fake.setValueMutex.Unlock()
	fake.SetValueStub = nil
	if fake.setValueReturnsOnCall == nil {
		fake.setValueReturnsOnCall = make(map[int]struct {
			result1 credentials.Value
			result2 error
		})
	}
	fake.setValueReturnsOnCall[i] = struct {
		result1 credentials.Value
		result2 error
	}{result1, result2}
}

func (fake *FakeCredhubClient) Invocations() map[string][][]interface{} {
	fake.invocationsMutex.RLock()
	defer fake.invocationsMutex.RUnlock()
	fake.addPermissionMutex.RLock()
	defer fake.addPermissionMutex.RUnlock()
	fake.deleteMutex.RLock()
	defer fake.deleteMutex.RUnlock()
	fake.findByPartialNameMutex.RLock()
	defer fake.findByPartialNameMutex.RUnlock()
	fake.getByIdMutex.RLock()
	defer fake.getByIdMutex.RUnlock()
	fake.getLatestVersionMutex.RLock()
	defer fake.getLatestVersionMutex.RUnlock()
	fake.setJSONMutex.RLock()
	defer fake.setJSONMutex.RUnlock()
	fake.setValueMutex.RLock()
	defer fake.setValueMutex.RUnlock()
	copiedInvocations := map[string][][]interface{}{}
	for key, value := range fake.invocations {
		copiedInvocations[key] = value
	}
	return copiedInvocations
}

func (fake *FakeCredhubClient) recordInvocation(key string, args []interface{}) {
	fake.invocationsMutex.Lock()
	defer fake.invocationsMutex.Unlock()
	if fake.invocations == nil {
		fake.invocations = map[string][][]interface{}{}
	}
	if fake.invocations[key] == nil {
		fake.invocations[key] = [][]interface{}{}
	}
	fake.invocations[key] = append(fake.invocations[key], args)
}

var _ credhub.CredhubClient = new(FakeCredhubClient)

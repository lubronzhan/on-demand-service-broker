// Code generated by counterfeiter. DO NOT EDIT.
package fakes

import (
	"log"
	"sync"

	"github.com/lubronzhan/on-demand-service-broker/cf"
	"github.com/lubronzhan/on-demand-service-broker/deleter"
)

type FakeCloudFoundryClient struct {
	DeleteBindingStub        func(cf.Binding, *log.Logger) error
	deleteBindingMutex       sync.RWMutex
	deleteBindingArgsForCall []struct {
		arg1 cf.Binding
		arg2 *log.Logger
	}
	deleteBindingReturns struct {
		result1 error
	}
	deleteBindingReturnsOnCall map[int]struct {
		result1 error
	}
	DeleteServiceInstanceStub        func(string, *log.Logger) error
	deleteServiceInstanceMutex       sync.RWMutex
	deleteServiceInstanceArgsForCall []struct {
		arg1 string
		arg2 *log.Logger
	}
	deleteServiceInstanceReturns struct {
		result1 error
	}
	deleteServiceInstanceReturnsOnCall map[int]struct {
		result1 error
	}
	DeleteServiceKeyStub        func(cf.ServiceKey, *log.Logger) error
	deleteServiceKeyMutex       sync.RWMutex
	deleteServiceKeyArgsForCall []struct {
		arg1 cf.ServiceKey
		arg2 *log.Logger
	}
	deleteServiceKeyReturns struct {
		result1 error
	}
	deleteServiceKeyReturnsOnCall map[int]struct {
		result1 error
	}
	GetBindingsForInstanceStub        func(string, *log.Logger) ([]cf.Binding, error)
	getBindingsForInstanceMutex       sync.RWMutex
	getBindingsForInstanceArgsForCall []struct {
		arg1 string
		arg2 *log.Logger
	}
	getBindingsForInstanceReturns struct {
		result1 []cf.Binding
		result2 error
	}
	getBindingsForInstanceReturnsOnCall map[int]struct {
		result1 []cf.Binding
		result2 error
	}
	GetLastOperationForInstanceStub        func(string, *log.Logger) (cf.LastOperation, error)
	getLastOperationForInstanceMutex       sync.RWMutex
	getLastOperationForInstanceArgsForCall []struct {
		arg1 string
		arg2 *log.Logger
	}
	getLastOperationForInstanceReturns struct {
		result1 cf.LastOperation
		result2 error
	}
	getLastOperationForInstanceReturnsOnCall map[int]struct {
		result1 cf.LastOperation
		result2 error
	}
	GetServiceInstancesStub        func(cf.GetInstancesFilter, *log.Logger) ([]cf.Instance, error)
	getServiceInstancesMutex       sync.RWMutex
	getServiceInstancesArgsForCall []struct {
		arg1 cf.GetInstancesFilter
		arg2 *log.Logger
	}
	getServiceInstancesReturns struct {
		result1 []cf.Instance
		result2 error
	}
	getServiceInstancesReturnsOnCall map[int]struct {
		result1 []cf.Instance
		result2 error
	}
	GetServiceKeysForInstanceStub        func(string, *log.Logger) ([]cf.ServiceKey, error)
	getServiceKeysForInstanceMutex       sync.RWMutex
	getServiceKeysForInstanceArgsForCall []struct {
		arg1 string
		arg2 *log.Logger
	}
	getServiceKeysForInstanceReturns struct {
		result1 []cf.ServiceKey
		result2 error
	}
	getServiceKeysForInstanceReturnsOnCall map[int]struct {
		result1 []cf.ServiceKey
		result2 error
	}
	invocations      map[string][][]interface{}
	invocationsMutex sync.RWMutex
}

func (fake *FakeCloudFoundryClient) DeleteBinding(arg1 cf.Binding, arg2 *log.Logger) error {
	fake.deleteBindingMutex.Lock()
	ret, specificReturn := fake.deleteBindingReturnsOnCall[len(fake.deleteBindingArgsForCall)]
	fake.deleteBindingArgsForCall = append(fake.deleteBindingArgsForCall, struct {
		arg1 cf.Binding
		arg2 *log.Logger
	}{arg1, arg2})
	fake.recordInvocation("DeleteBinding", []interface{}{arg1, arg2})
	fake.deleteBindingMutex.Unlock()
	if fake.DeleteBindingStub != nil {
		return fake.DeleteBindingStub(arg1, arg2)
	}
	if specificReturn {
		return ret.result1
	}
	fakeReturns := fake.deleteBindingReturns
	return fakeReturns.result1
}

func (fake *FakeCloudFoundryClient) DeleteBindingCallCount() int {
	fake.deleteBindingMutex.RLock()
	defer fake.deleteBindingMutex.RUnlock()
	return len(fake.deleteBindingArgsForCall)
}

func (fake *FakeCloudFoundryClient) DeleteBindingCalls(stub func(cf.Binding, *log.Logger) error) {
	fake.deleteBindingMutex.Lock()
	defer fake.deleteBindingMutex.Unlock()
	fake.DeleteBindingStub = stub
}

func (fake *FakeCloudFoundryClient) DeleteBindingArgsForCall(i int) (cf.Binding, *log.Logger) {
	fake.deleteBindingMutex.RLock()
	defer fake.deleteBindingMutex.RUnlock()
	argsForCall := fake.deleteBindingArgsForCall[i]
	return argsForCall.arg1, argsForCall.arg2
}

func (fake *FakeCloudFoundryClient) DeleteBindingReturns(result1 error) {
	fake.deleteBindingMutex.Lock()
	defer fake.deleteBindingMutex.Unlock()
	fake.DeleteBindingStub = nil
	fake.deleteBindingReturns = struct {
		result1 error
	}{result1}
}

func (fake *FakeCloudFoundryClient) DeleteBindingReturnsOnCall(i int, result1 error) {
	fake.deleteBindingMutex.Lock()
	defer fake.deleteBindingMutex.Unlock()
	fake.DeleteBindingStub = nil
	if fake.deleteBindingReturnsOnCall == nil {
		fake.deleteBindingReturnsOnCall = make(map[int]struct {
			result1 error
		})
	}
	fake.deleteBindingReturnsOnCall[i] = struct {
		result1 error
	}{result1}
}

func (fake *FakeCloudFoundryClient) DeleteServiceInstance(arg1 string, arg2 *log.Logger) error {
	fake.deleteServiceInstanceMutex.Lock()
	ret, specificReturn := fake.deleteServiceInstanceReturnsOnCall[len(fake.deleteServiceInstanceArgsForCall)]
	fake.deleteServiceInstanceArgsForCall = append(fake.deleteServiceInstanceArgsForCall, struct {
		arg1 string
		arg2 *log.Logger
	}{arg1, arg2})
	fake.recordInvocation("DeleteServiceInstance", []interface{}{arg1, arg2})
	fake.deleteServiceInstanceMutex.Unlock()
	if fake.DeleteServiceInstanceStub != nil {
		return fake.DeleteServiceInstanceStub(arg1, arg2)
	}
	if specificReturn {
		return ret.result1
	}
	fakeReturns := fake.deleteServiceInstanceReturns
	return fakeReturns.result1
}

func (fake *FakeCloudFoundryClient) DeleteServiceInstanceCallCount() int {
	fake.deleteServiceInstanceMutex.RLock()
	defer fake.deleteServiceInstanceMutex.RUnlock()
	return len(fake.deleteServiceInstanceArgsForCall)
}

func (fake *FakeCloudFoundryClient) DeleteServiceInstanceCalls(stub func(string, *log.Logger) error) {
	fake.deleteServiceInstanceMutex.Lock()
	defer fake.deleteServiceInstanceMutex.Unlock()
	fake.DeleteServiceInstanceStub = stub
}

func (fake *FakeCloudFoundryClient) DeleteServiceInstanceArgsForCall(i int) (string, *log.Logger) {
	fake.deleteServiceInstanceMutex.RLock()
	defer fake.deleteServiceInstanceMutex.RUnlock()
	argsForCall := fake.deleteServiceInstanceArgsForCall[i]
	return argsForCall.arg1, argsForCall.arg2
}

func (fake *FakeCloudFoundryClient) DeleteServiceInstanceReturns(result1 error) {
	fake.deleteServiceInstanceMutex.Lock()
	defer fake.deleteServiceInstanceMutex.Unlock()
	fake.DeleteServiceInstanceStub = nil
	fake.deleteServiceInstanceReturns = struct {
		result1 error
	}{result1}
}

func (fake *FakeCloudFoundryClient) DeleteServiceInstanceReturnsOnCall(i int, result1 error) {
	fake.deleteServiceInstanceMutex.Lock()
	defer fake.deleteServiceInstanceMutex.Unlock()
	fake.DeleteServiceInstanceStub = nil
	if fake.deleteServiceInstanceReturnsOnCall == nil {
		fake.deleteServiceInstanceReturnsOnCall = make(map[int]struct {
			result1 error
		})
	}
	fake.deleteServiceInstanceReturnsOnCall[i] = struct {
		result1 error
	}{result1}
}

func (fake *FakeCloudFoundryClient) DeleteServiceKey(arg1 cf.ServiceKey, arg2 *log.Logger) error {
	fake.deleteServiceKeyMutex.Lock()
	ret, specificReturn := fake.deleteServiceKeyReturnsOnCall[len(fake.deleteServiceKeyArgsForCall)]
	fake.deleteServiceKeyArgsForCall = append(fake.deleteServiceKeyArgsForCall, struct {
		arg1 cf.ServiceKey
		arg2 *log.Logger
	}{arg1, arg2})
	fake.recordInvocation("DeleteServiceKey", []interface{}{arg1, arg2})
	fake.deleteServiceKeyMutex.Unlock()
	if fake.DeleteServiceKeyStub != nil {
		return fake.DeleteServiceKeyStub(arg1, arg2)
	}
	if specificReturn {
		return ret.result1
	}
	fakeReturns := fake.deleteServiceKeyReturns
	return fakeReturns.result1
}

func (fake *FakeCloudFoundryClient) DeleteServiceKeyCallCount() int {
	fake.deleteServiceKeyMutex.RLock()
	defer fake.deleteServiceKeyMutex.RUnlock()
	return len(fake.deleteServiceKeyArgsForCall)
}

func (fake *FakeCloudFoundryClient) DeleteServiceKeyCalls(stub func(cf.ServiceKey, *log.Logger) error) {
	fake.deleteServiceKeyMutex.Lock()
	defer fake.deleteServiceKeyMutex.Unlock()
	fake.DeleteServiceKeyStub = stub
}

func (fake *FakeCloudFoundryClient) DeleteServiceKeyArgsForCall(i int) (cf.ServiceKey, *log.Logger) {
	fake.deleteServiceKeyMutex.RLock()
	defer fake.deleteServiceKeyMutex.RUnlock()
	argsForCall := fake.deleteServiceKeyArgsForCall[i]
	return argsForCall.arg1, argsForCall.arg2
}

func (fake *FakeCloudFoundryClient) DeleteServiceKeyReturns(result1 error) {
	fake.deleteServiceKeyMutex.Lock()
	defer fake.deleteServiceKeyMutex.Unlock()
	fake.DeleteServiceKeyStub = nil
	fake.deleteServiceKeyReturns = struct {
		result1 error
	}{result1}
}

func (fake *FakeCloudFoundryClient) DeleteServiceKeyReturnsOnCall(i int, result1 error) {
	fake.deleteServiceKeyMutex.Lock()
	defer fake.deleteServiceKeyMutex.Unlock()
	fake.DeleteServiceKeyStub = nil
	if fake.deleteServiceKeyReturnsOnCall == nil {
		fake.deleteServiceKeyReturnsOnCall = make(map[int]struct {
			result1 error
		})
	}
	fake.deleteServiceKeyReturnsOnCall[i] = struct {
		result1 error
	}{result1}
}

func (fake *FakeCloudFoundryClient) GetBindingsForInstance(arg1 string, arg2 *log.Logger) ([]cf.Binding, error) {
	fake.getBindingsForInstanceMutex.Lock()
	ret, specificReturn := fake.getBindingsForInstanceReturnsOnCall[len(fake.getBindingsForInstanceArgsForCall)]
	fake.getBindingsForInstanceArgsForCall = append(fake.getBindingsForInstanceArgsForCall, struct {
		arg1 string
		arg2 *log.Logger
	}{arg1, arg2})
	fake.recordInvocation("GetBindingsForInstance", []interface{}{arg1, arg2})
	fake.getBindingsForInstanceMutex.Unlock()
	if fake.GetBindingsForInstanceStub != nil {
		return fake.GetBindingsForInstanceStub(arg1, arg2)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	fakeReturns := fake.getBindingsForInstanceReturns
	return fakeReturns.result1, fakeReturns.result2
}

func (fake *FakeCloudFoundryClient) GetBindingsForInstanceCallCount() int {
	fake.getBindingsForInstanceMutex.RLock()
	defer fake.getBindingsForInstanceMutex.RUnlock()
	return len(fake.getBindingsForInstanceArgsForCall)
}

func (fake *FakeCloudFoundryClient) GetBindingsForInstanceCalls(stub func(string, *log.Logger) ([]cf.Binding, error)) {
	fake.getBindingsForInstanceMutex.Lock()
	defer fake.getBindingsForInstanceMutex.Unlock()
	fake.GetBindingsForInstanceStub = stub
}

func (fake *FakeCloudFoundryClient) GetBindingsForInstanceArgsForCall(i int) (string, *log.Logger) {
	fake.getBindingsForInstanceMutex.RLock()
	defer fake.getBindingsForInstanceMutex.RUnlock()
	argsForCall := fake.getBindingsForInstanceArgsForCall[i]
	return argsForCall.arg1, argsForCall.arg2
}

func (fake *FakeCloudFoundryClient) GetBindingsForInstanceReturns(result1 []cf.Binding, result2 error) {
	fake.getBindingsForInstanceMutex.Lock()
	defer fake.getBindingsForInstanceMutex.Unlock()
	fake.GetBindingsForInstanceStub = nil
	fake.getBindingsForInstanceReturns = struct {
		result1 []cf.Binding
		result2 error
	}{result1, result2}
}

func (fake *FakeCloudFoundryClient) GetBindingsForInstanceReturnsOnCall(i int, result1 []cf.Binding, result2 error) {
	fake.getBindingsForInstanceMutex.Lock()
	defer fake.getBindingsForInstanceMutex.Unlock()
	fake.GetBindingsForInstanceStub = nil
	if fake.getBindingsForInstanceReturnsOnCall == nil {
		fake.getBindingsForInstanceReturnsOnCall = make(map[int]struct {
			result1 []cf.Binding
			result2 error
		})
	}
	fake.getBindingsForInstanceReturnsOnCall[i] = struct {
		result1 []cf.Binding
		result2 error
	}{result1, result2}
}

func (fake *FakeCloudFoundryClient) GetLastOperationForInstance(arg1 string, arg2 *log.Logger) (cf.LastOperation, error) {
	fake.getLastOperationForInstanceMutex.Lock()
	ret, specificReturn := fake.getLastOperationForInstanceReturnsOnCall[len(fake.getLastOperationForInstanceArgsForCall)]
	fake.getLastOperationForInstanceArgsForCall = append(fake.getLastOperationForInstanceArgsForCall, struct {
		arg1 string
		arg2 *log.Logger
	}{arg1, arg2})
	fake.recordInvocation("GetLastOperationForInstance", []interface{}{arg1, arg2})
	fake.getLastOperationForInstanceMutex.Unlock()
	if fake.GetLastOperationForInstanceStub != nil {
		return fake.GetLastOperationForInstanceStub(arg1, arg2)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	fakeReturns := fake.getLastOperationForInstanceReturns
	return fakeReturns.result1, fakeReturns.result2
}

func (fake *FakeCloudFoundryClient) GetLastOperationForInstanceCallCount() int {
	fake.getLastOperationForInstanceMutex.RLock()
	defer fake.getLastOperationForInstanceMutex.RUnlock()
	return len(fake.getLastOperationForInstanceArgsForCall)
}

func (fake *FakeCloudFoundryClient) GetLastOperationForInstanceCalls(stub func(string, *log.Logger) (cf.LastOperation, error)) {
	fake.getLastOperationForInstanceMutex.Lock()
	defer fake.getLastOperationForInstanceMutex.Unlock()
	fake.GetLastOperationForInstanceStub = stub
}

func (fake *FakeCloudFoundryClient) GetLastOperationForInstanceArgsForCall(i int) (string, *log.Logger) {
	fake.getLastOperationForInstanceMutex.RLock()
	defer fake.getLastOperationForInstanceMutex.RUnlock()
	argsForCall := fake.getLastOperationForInstanceArgsForCall[i]
	return argsForCall.arg1, argsForCall.arg2
}

func (fake *FakeCloudFoundryClient) GetLastOperationForInstanceReturns(result1 cf.LastOperation, result2 error) {
	fake.getLastOperationForInstanceMutex.Lock()
	defer fake.getLastOperationForInstanceMutex.Unlock()
	fake.GetLastOperationForInstanceStub = nil
	fake.getLastOperationForInstanceReturns = struct {
		result1 cf.LastOperation
		result2 error
	}{result1, result2}
}

func (fake *FakeCloudFoundryClient) GetLastOperationForInstanceReturnsOnCall(i int, result1 cf.LastOperation, result2 error) {
	fake.getLastOperationForInstanceMutex.Lock()
	defer fake.getLastOperationForInstanceMutex.Unlock()
	fake.GetLastOperationForInstanceStub = nil
	if fake.getLastOperationForInstanceReturnsOnCall == nil {
		fake.getLastOperationForInstanceReturnsOnCall = make(map[int]struct {
			result1 cf.LastOperation
			result2 error
		})
	}
	fake.getLastOperationForInstanceReturnsOnCall[i] = struct {
		result1 cf.LastOperation
		result2 error
	}{result1, result2}
}

func (fake *FakeCloudFoundryClient) GetServiceInstances(arg1 cf.GetInstancesFilter, arg2 *log.Logger) ([]cf.Instance, error) {
	fake.getServiceInstancesMutex.Lock()
	ret, specificReturn := fake.getServiceInstancesReturnsOnCall[len(fake.getServiceInstancesArgsForCall)]
	fake.getServiceInstancesArgsForCall = append(fake.getServiceInstancesArgsForCall, struct {
		arg1 cf.GetInstancesFilter
		arg2 *log.Logger
	}{arg1, arg2})
	fake.recordInvocation("GetServiceInstances", []interface{}{arg1, arg2})
	fake.getServiceInstancesMutex.Unlock()
	if fake.GetServiceInstancesStub != nil {
		return fake.GetServiceInstancesStub(arg1, arg2)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	fakeReturns := fake.getServiceInstancesReturns
	return fakeReturns.result1, fakeReturns.result2
}

func (fake *FakeCloudFoundryClient) GetServiceInstancesCallCount() int {
	fake.getServiceInstancesMutex.RLock()
	defer fake.getServiceInstancesMutex.RUnlock()
	return len(fake.getServiceInstancesArgsForCall)
}

func (fake *FakeCloudFoundryClient) GetServiceInstancesCalls(stub func(cf.GetInstancesFilter, *log.Logger) ([]cf.Instance, error)) {
	fake.getServiceInstancesMutex.Lock()
	defer fake.getServiceInstancesMutex.Unlock()
	fake.GetServiceInstancesStub = stub
}

func (fake *FakeCloudFoundryClient) GetServiceInstancesArgsForCall(i int) (cf.GetInstancesFilter, *log.Logger) {
	fake.getServiceInstancesMutex.RLock()
	defer fake.getServiceInstancesMutex.RUnlock()
	argsForCall := fake.getServiceInstancesArgsForCall[i]
	return argsForCall.arg1, argsForCall.arg2
}

func (fake *FakeCloudFoundryClient) GetServiceInstancesReturns(result1 []cf.Instance, result2 error) {
	fake.getServiceInstancesMutex.Lock()
	defer fake.getServiceInstancesMutex.Unlock()
	fake.GetServiceInstancesStub = nil
	fake.getServiceInstancesReturns = struct {
		result1 []cf.Instance
		result2 error
	}{result1, result2}
}

func (fake *FakeCloudFoundryClient) GetServiceInstancesReturnsOnCall(i int, result1 []cf.Instance, result2 error) {
	fake.getServiceInstancesMutex.Lock()
	defer fake.getServiceInstancesMutex.Unlock()
	fake.GetServiceInstancesStub = nil
	if fake.getServiceInstancesReturnsOnCall == nil {
		fake.getServiceInstancesReturnsOnCall = make(map[int]struct {
			result1 []cf.Instance
			result2 error
		})
	}
	fake.getServiceInstancesReturnsOnCall[i] = struct {
		result1 []cf.Instance
		result2 error
	}{result1, result2}
}

func (fake *FakeCloudFoundryClient) GetServiceKeysForInstance(arg1 string, arg2 *log.Logger) ([]cf.ServiceKey, error) {
	fake.getServiceKeysForInstanceMutex.Lock()
	ret, specificReturn := fake.getServiceKeysForInstanceReturnsOnCall[len(fake.getServiceKeysForInstanceArgsForCall)]
	fake.getServiceKeysForInstanceArgsForCall = append(fake.getServiceKeysForInstanceArgsForCall, struct {
		arg1 string
		arg2 *log.Logger
	}{arg1, arg2})
	fake.recordInvocation("GetServiceKeysForInstance", []interface{}{arg1, arg2})
	fake.getServiceKeysForInstanceMutex.Unlock()
	if fake.GetServiceKeysForInstanceStub != nil {
		return fake.GetServiceKeysForInstanceStub(arg1, arg2)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	fakeReturns := fake.getServiceKeysForInstanceReturns
	return fakeReturns.result1, fakeReturns.result2
}

func (fake *FakeCloudFoundryClient) GetServiceKeysForInstanceCallCount() int {
	fake.getServiceKeysForInstanceMutex.RLock()
	defer fake.getServiceKeysForInstanceMutex.RUnlock()
	return len(fake.getServiceKeysForInstanceArgsForCall)
}

func (fake *FakeCloudFoundryClient) GetServiceKeysForInstanceCalls(stub func(string, *log.Logger) ([]cf.ServiceKey, error)) {
	fake.getServiceKeysForInstanceMutex.Lock()
	defer fake.getServiceKeysForInstanceMutex.Unlock()
	fake.GetServiceKeysForInstanceStub = stub
}

func (fake *FakeCloudFoundryClient) GetServiceKeysForInstanceArgsForCall(i int) (string, *log.Logger) {
	fake.getServiceKeysForInstanceMutex.RLock()
	defer fake.getServiceKeysForInstanceMutex.RUnlock()
	argsForCall := fake.getServiceKeysForInstanceArgsForCall[i]
	return argsForCall.arg1, argsForCall.arg2
}

func (fake *FakeCloudFoundryClient) GetServiceKeysForInstanceReturns(result1 []cf.ServiceKey, result2 error) {
	fake.getServiceKeysForInstanceMutex.Lock()
	defer fake.getServiceKeysForInstanceMutex.Unlock()
	fake.GetServiceKeysForInstanceStub = nil
	fake.getServiceKeysForInstanceReturns = struct {
		result1 []cf.ServiceKey
		result2 error
	}{result1, result2}
}

func (fake *FakeCloudFoundryClient) GetServiceKeysForInstanceReturnsOnCall(i int, result1 []cf.ServiceKey, result2 error) {
	fake.getServiceKeysForInstanceMutex.Lock()
	defer fake.getServiceKeysForInstanceMutex.Unlock()
	fake.GetServiceKeysForInstanceStub = nil
	if fake.getServiceKeysForInstanceReturnsOnCall == nil {
		fake.getServiceKeysForInstanceReturnsOnCall = make(map[int]struct {
			result1 []cf.ServiceKey
			result2 error
		})
	}
	fake.getServiceKeysForInstanceReturnsOnCall[i] = struct {
		result1 []cf.ServiceKey
		result2 error
	}{result1, result2}
}

func (fake *FakeCloudFoundryClient) Invocations() map[string][][]interface{} {
	fake.invocationsMutex.RLock()
	defer fake.invocationsMutex.RUnlock()
	fake.deleteBindingMutex.RLock()
	defer fake.deleteBindingMutex.RUnlock()
	fake.deleteServiceInstanceMutex.RLock()
	defer fake.deleteServiceInstanceMutex.RUnlock()
	fake.deleteServiceKeyMutex.RLock()
	defer fake.deleteServiceKeyMutex.RUnlock()
	fake.getBindingsForInstanceMutex.RLock()
	defer fake.getBindingsForInstanceMutex.RUnlock()
	fake.getLastOperationForInstanceMutex.RLock()
	defer fake.getLastOperationForInstanceMutex.RUnlock()
	fake.getServiceInstancesMutex.RLock()
	defer fake.getServiceInstancesMutex.RUnlock()
	fake.getServiceKeysForInstanceMutex.RLock()
	defer fake.getServiceKeysForInstanceMutex.RUnlock()
	copiedInvocations := map[string][][]interface{}{}
	for key, value := range fake.invocations {
		copiedInvocations[key] = value
	}
	return copiedInvocations
}

func (fake *FakeCloudFoundryClient) recordInvocation(key string, args []interface{}) {
	fake.invocationsMutex.Lock()
	defer fake.invocationsMutex.Unlock()
	if fake.invocations == nil {
		fake.invocations = map[string][][]interface{}{}
	}
	if fake.invocations[key] == nil {
		fake.invocations[key] = [][]interface{}{}
	}
	fake.invocations[key] = append(fake.invocations[key], args)
}

var _ deleter.CloudFoundryClient = new(FakeCloudFoundryClient)

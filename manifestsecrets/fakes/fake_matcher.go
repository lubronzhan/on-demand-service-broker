// Code generated by counterfeiter. DO NOT EDIT.
package fakes

import (
	"sync"

	"github.com/lubronzhan/on-demand-service-broker/boshdirector"
	"github.com/lubronzhan/on-demand-service-broker/manifestsecrets"
)

type FakeMatcher struct {
	MatchStub        func([]byte, []boshdirector.Variable) (map[string]boshdirector.Variable, error)
	matchMutex       sync.RWMutex
	matchArgsForCall []struct {
		arg1 []byte
		arg2 []boshdirector.Variable
	}
	matchReturns struct {
		result1 map[string]boshdirector.Variable
		result2 error
	}
	matchReturnsOnCall map[int]struct {
		result1 map[string]boshdirector.Variable
		result2 error
	}
	invocations      map[string][][]interface{}
	invocationsMutex sync.RWMutex
}

func (fake *FakeMatcher) Match(arg1 []byte, arg2 []boshdirector.Variable) (map[string]boshdirector.Variable, error) {
	var arg1Copy []byte
	if arg1 != nil {
		arg1Copy = make([]byte, len(arg1))
		copy(arg1Copy, arg1)
	}
	var arg2Copy []boshdirector.Variable
	if arg2 != nil {
		arg2Copy = make([]boshdirector.Variable, len(arg2))
		copy(arg2Copy, arg2)
	}
	fake.matchMutex.Lock()
	ret, specificReturn := fake.matchReturnsOnCall[len(fake.matchArgsForCall)]
	fake.matchArgsForCall = append(fake.matchArgsForCall, struct {
		arg1 []byte
		arg2 []boshdirector.Variable
	}{arg1Copy, arg2Copy})
	fake.recordInvocation("Match", []interface{}{arg1Copy, arg2Copy})
	fake.matchMutex.Unlock()
	if fake.MatchStub != nil {
		return fake.MatchStub(arg1, arg2)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	fakeReturns := fake.matchReturns
	return fakeReturns.result1, fakeReturns.result2
}

func (fake *FakeMatcher) MatchCallCount() int {
	fake.matchMutex.RLock()
	defer fake.matchMutex.RUnlock()
	return len(fake.matchArgsForCall)
}

func (fake *FakeMatcher) MatchCalls(stub func([]byte, []boshdirector.Variable) (map[string]boshdirector.Variable, error)) {
	fake.matchMutex.Lock()
	defer fake.matchMutex.Unlock()
	fake.MatchStub = stub
}

func (fake *FakeMatcher) MatchArgsForCall(i int) ([]byte, []boshdirector.Variable) {
	fake.matchMutex.RLock()
	defer fake.matchMutex.RUnlock()
	argsForCall := fake.matchArgsForCall[i]
	return argsForCall.arg1, argsForCall.arg2
}

func (fake *FakeMatcher) MatchReturns(result1 map[string]boshdirector.Variable, result2 error) {
	fake.matchMutex.Lock()
	defer fake.matchMutex.Unlock()
	fake.MatchStub = nil
	fake.matchReturns = struct {
		result1 map[string]boshdirector.Variable
		result2 error
	}{result1, result2}
}

func (fake *FakeMatcher) MatchReturnsOnCall(i int, result1 map[string]boshdirector.Variable, result2 error) {
	fake.matchMutex.Lock()
	defer fake.matchMutex.Unlock()
	fake.MatchStub = nil
	if fake.matchReturnsOnCall == nil {
		fake.matchReturnsOnCall = make(map[int]struct {
			result1 map[string]boshdirector.Variable
			result2 error
		})
	}
	fake.matchReturnsOnCall[i] = struct {
		result1 map[string]boshdirector.Variable
		result2 error
	}{result1, result2}
}

func (fake *FakeMatcher) Invocations() map[string][][]interface{} {
	fake.invocationsMutex.RLock()
	defer fake.invocationsMutex.RUnlock()
	fake.matchMutex.RLock()
	defer fake.matchMutex.RUnlock()
	copiedInvocations := map[string][][]interface{}{}
	for key, value := range fake.invocations {
		copiedInvocations[key] = value
	}
	return copiedInvocations
}

func (fake *FakeMatcher) recordInvocation(key string, args []interface{}) {
	fake.invocationsMutex.Lock()
	defer fake.invocationsMutex.Unlock()
	if fake.invocations == nil {
		fake.invocations = map[string][][]interface{}{}
	}
	if fake.invocations[key] == nil {
		fake.invocations[key] = [][]interface{}{}
	}
	fake.invocations[key] = append(fake.invocations[key], args)
}

var _ manifestsecrets.Matcher = new(FakeMatcher)

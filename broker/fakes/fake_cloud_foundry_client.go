// Code generated by counterfeiter. DO NOT EDIT.
package fakes

import (
	"log"
	"sync"

	"github.com/lubronzhan/on-demand-service-broker/broker"
	"github.com/lubronzhan/on-demand-service-broker/cf"
)

type FakeCloudFoundryClient struct {
	CountInstancesOfPlanStub        func(string, string, *log.Logger) (int, error)
	countInstancesOfPlanMutex       sync.RWMutex
	countInstancesOfPlanArgsForCall []struct {
		arg1 string
		arg2 string
		arg3 *log.Logger
	}
	countInstancesOfPlanReturns struct {
		result1 int
		result2 error
	}
	countInstancesOfPlanReturnsOnCall map[int]struct {
		result1 int
		result2 error
	}
	CountInstancesOfServiceOfferingStub        func(string, *log.Logger) (map[cf.ServicePlan]int, error)
	countInstancesOfServiceOfferingMutex       sync.RWMutex
	countInstancesOfServiceOfferingArgsForCall []struct {
		arg1 string
		arg2 *log.Logger
	}
	countInstancesOfServiceOfferingReturns struct {
		result1 map[cf.ServicePlan]int
		result2 error
	}
	countInstancesOfServiceOfferingReturnsOnCall map[int]struct {
		result1 map[cf.ServicePlan]int
		result2 error
	}
	GetAPIVersionStub        func(*log.Logger) (string, error)
	getAPIVersionMutex       sync.RWMutex
	getAPIVersionArgsForCall []struct {
		arg1 *log.Logger
	}
	getAPIVersionReturns struct {
		result1 string
		result2 error
	}
	getAPIVersionReturnsOnCall map[int]struct {
		result1 string
		result2 error
	}
	GetServiceInstancesStub        func(cf.GetInstancesFilter, *log.Logger) ([]cf.Instance, error)
	getServiceInstancesMutex       sync.RWMutex
	getServiceInstancesArgsForCall []struct {
		arg1 cf.GetInstancesFilter
		arg2 *log.Logger
	}
	getServiceInstancesReturns struct {
		result1 []cf.Instance
		result2 error
	}
	getServiceInstancesReturnsOnCall map[int]struct {
		result1 []cf.Instance
		result2 error
	}
	invocations      map[string][][]interface{}
	invocationsMutex sync.RWMutex
}

func (fake *FakeCloudFoundryClient) CountInstancesOfPlan(arg1 string, arg2 string, arg3 *log.Logger) (int, error) {
	fake.countInstancesOfPlanMutex.Lock()
	ret, specificReturn := fake.countInstancesOfPlanReturnsOnCall[len(fake.countInstancesOfPlanArgsForCall)]
	fake.countInstancesOfPlanArgsForCall = append(fake.countInstancesOfPlanArgsForCall, struct {
		arg1 string
		arg2 string
		arg3 *log.Logger
	}{arg1, arg2, arg3})
	fake.recordInvocation("CountInstancesOfPlan", []interface{}{arg1, arg2, arg3})
	fake.countInstancesOfPlanMutex.Unlock()
	if fake.CountInstancesOfPlanStub != nil {
		return fake.CountInstancesOfPlanStub(arg1, arg2, arg3)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	fakeReturns := fake.countInstancesOfPlanReturns
	return fakeReturns.result1, fakeReturns.result2
}

func (fake *FakeCloudFoundryClient) CountInstancesOfPlanCallCount() int {
	fake.countInstancesOfPlanMutex.RLock()
	defer fake.countInstancesOfPlanMutex.RUnlock()
	return len(fake.countInstancesOfPlanArgsForCall)
}

func (fake *FakeCloudFoundryClient) CountInstancesOfPlanCalls(stub func(string, string, *log.Logger) (int, error)) {
	fake.countInstancesOfPlanMutex.Lock()
	defer fake.countInstancesOfPlanMutex.Unlock()
	fake.CountInstancesOfPlanStub = stub
}

func (fake *FakeCloudFoundryClient) CountInstancesOfPlanArgsForCall(i int) (string, string, *log.Logger) {
	fake.countInstancesOfPlanMutex.RLock()
	defer fake.countInstancesOfPlanMutex.RUnlock()
	argsForCall := fake.countInstancesOfPlanArgsForCall[i]
	return argsForCall.arg1, argsForCall.arg2, argsForCall.arg3
}

func (fake *FakeCloudFoundryClient) CountInstancesOfPlanReturns(result1 int, result2 error) {
	fake.countInstancesOfPlanMutex.Lock()
	defer fake.countInstancesOfPlanMutex.Unlock()
	fake.CountInstancesOfPlanStub = nil
	fake.countInstancesOfPlanReturns = struct {
		result1 int
		result2 error
	}{result1, result2}
}

func (fake *FakeCloudFoundryClient) CountInstancesOfPlanReturnsOnCall(i int, result1 int, result2 error) {
	fake.countInstancesOfPlanMutex.Lock()
	defer fake.countInstancesOfPlanMutex.Unlock()
	fake.CountInstancesOfPlanStub = nil
	if fake.countInstancesOfPlanReturnsOnCall == nil {
		fake.countInstancesOfPlanReturnsOnCall = make(map[int]struct {
			result1 int
			result2 error
		})
	}
	fake.countInstancesOfPlanReturnsOnCall[i] = struct {
		result1 int
		result2 error
	}{result1, result2}
}

func (fake *FakeCloudFoundryClient) CountInstancesOfServiceOffering(arg1 string, arg2 *log.Logger) (map[cf.ServicePlan]int, error) {
	fake.countInstancesOfServiceOfferingMutex.Lock()
	ret, specificReturn := fake.countInstancesOfServiceOfferingReturnsOnCall[len(fake.countInstancesOfServiceOfferingArgsForCall)]
	fake.countInstancesOfServiceOfferingArgsForCall = append(fake.countInstancesOfServiceOfferingArgsForCall, struct {
		arg1 string
		arg2 *log.Logger
	}{arg1, arg2})
	fake.recordInvocation("CountInstancesOfServiceOffering", []interface{}{arg1, arg2})
	fake.countInstancesOfServiceOfferingMutex.Unlock()
	if fake.CountInstancesOfServiceOfferingStub != nil {
		return fake.CountInstancesOfServiceOfferingStub(arg1, arg2)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	fakeReturns := fake.countInstancesOfServiceOfferingReturns
	return fakeReturns.result1, fakeReturns.result2
}

func (fake *FakeCloudFoundryClient) CountInstancesOfServiceOfferingCallCount() int {
	fake.countInstancesOfServiceOfferingMutex.RLock()
	defer fake.countInstancesOfServiceOfferingMutex.RUnlock()
	return len(fake.countInstancesOfServiceOfferingArgsForCall)
}

func (fake *FakeCloudFoundryClient) CountInstancesOfServiceOfferingCalls(stub func(string, *log.Logger) (map[cf.ServicePlan]int, error)) {
	fake.countInstancesOfServiceOfferingMutex.Lock()
	defer fake.countInstancesOfServiceOfferingMutex.Unlock()
	fake.CountInstancesOfServiceOfferingStub = stub
}

func (fake *FakeCloudFoundryClient) CountInstancesOfServiceOfferingArgsForCall(i int) (string, *log.Logger) {
	fake.countInstancesOfServiceOfferingMutex.RLock()
	defer fake.countInstancesOfServiceOfferingMutex.RUnlock()
	argsForCall := fake.countInstancesOfServiceOfferingArgsForCall[i]
	return argsForCall.arg1, argsForCall.arg2
}

func (fake *FakeCloudFoundryClient) CountInstancesOfServiceOfferingReturns(result1 map[cf.ServicePlan]int, result2 error) {
	fake.countInstancesOfServiceOfferingMutex.Lock()
	defer fake.countInstancesOfServiceOfferingMutex.Unlock()
	fake.CountInstancesOfServiceOfferingStub = nil
	fake.countInstancesOfServiceOfferingReturns = struct {
		result1 map[cf.ServicePlan]int
		result2 error
	}{result1, result2}
}

func (fake *FakeCloudFoundryClient) CountInstancesOfServiceOfferingReturnsOnCall(i int, result1 map[cf.ServicePlan]int, result2 error) {
	fake.countInstancesOfServiceOfferingMutex.Lock()
	defer fake.countInstancesOfServiceOfferingMutex.Unlock()
	fake.CountInstancesOfServiceOfferingStub = nil
	if fake.countInstancesOfServiceOfferingReturnsOnCall == nil {
		fake.countInstancesOfServiceOfferingReturnsOnCall = make(map[int]struct {
			result1 map[cf.ServicePlan]int
			result2 error
		})
	}
	fake.countInstancesOfServiceOfferingReturnsOnCall[i] = struct {
		result1 map[cf.ServicePlan]int
		result2 error
	}{result1, result2}
}

func (fake *FakeCloudFoundryClient) GetAPIVersion(arg1 *log.Logger) (string, error) {
	fake.getAPIVersionMutex.Lock()
	ret, specificReturn := fake.getAPIVersionReturnsOnCall[len(fake.getAPIVersionArgsForCall)]
	fake.getAPIVersionArgsForCall = append(fake.getAPIVersionArgsForCall, struct {
		arg1 *log.Logger
	}{arg1})
	fake.recordInvocation("GetAPIVersion", []interface{}{arg1})
	fake.getAPIVersionMutex.Unlock()
	if fake.GetAPIVersionStub != nil {
		return fake.GetAPIVersionStub(arg1)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	fakeReturns := fake.getAPIVersionReturns
	return fakeReturns.result1, fakeReturns.result2
}

func (fake *FakeCloudFoundryClient) GetAPIVersionCallCount() int {
	fake.getAPIVersionMutex.RLock()
	defer fake.getAPIVersionMutex.RUnlock()
	return len(fake.getAPIVersionArgsForCall)
}

func (fake *FakeCloudFoundryClient) GetAPIVersionCalls(stub func(*log.Logger) (string, error)) {
	fake.getAPIVersionMutex.Lock()
	defer fake.getAPIVersionMutex.Unlock()
	fake.GetAPIVersionStub = stub
}

func (fake *FakeCloudFoundryClient) GetAPIVersionArgsForCall(i int) *log.Logger {
	fake.getAPIVersionMutex.RLock()
	defer fake.getAPIVersionMutex.RUnlock()
	argsForCall := fake.getAPIVersionArgsForCall[i]
	return argsForCall.arg1
}

func (fake *FakeCloudFoundryClient) GetAPIVersionReturns(result1 string, result2 error) {
	fake.getAPIVersionMutex.Lock()
	defer fake.getAPIVersionMutex.Unlock()
	fake.GetAPIVersionStub = nil
	fake.getAPIVersionReturns = struct {
		result1 string
		result2 error
	}{result1, result2}
}

func (fake *FakeCloudFoundryClient) GetAPIVersionReturnsOnCall(i int, result1 string, result2 error) {
	fake.getAPIVersionMutex.Lock()
	defer fake.getAPIVersionMutex.Unlock()
	fake.GetAPIVersionStub = nil
	if fake.getAPIVersionReturnsOnCall == nil {
		fake.getAPIVersionReturnsOnCall = make(map[int]struct {
			result1 string
			result2 error
		})
	}
	fake.getAPIVersionReturnsOnCall[i] = struct {
		result1 string
		result2 error
	}{result1, result2}
}

func (fake *FakeCloudFoundryClient) GetServiceInstances(arg1 cf.GetInstancesFilter, arg2 *log.Logger) ([]cf.Instance, error) {
	fake.getServiceInstancesMutex.Lock()
	ret, specificReturn := fake.getServiceInstancesReturnsOnCall[len(fake.getServiceInstancesArgsForCall)]
	fake.getServiceInstancesArgsForCall = append(fake.getServiceInstancesArgsForCall, struct {
		arg1 cf.GetInstancesFilter
		arg2 *log.Logger
	}{arg1, arg2})
	fake.recordInvocation("GetServiceInstances", []interface{}{arg1, arg2})
	fake.getServiceInstancesMutex.Unlock()
	if fake.GetServiceInstancesStub != nil {
		return fake.GetServiceInstancesStub(arg1, arg2)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	fakeReturns := fake.getServiceInstancesReturns
	return fakeReturns.result1, fakeReturns.result2
}

func (fake *FakeCloudFoundryClient) GetServiceInstancesCallCount() int {
	fake.getServiceInstancesMutex.RLock()
	defer fake.getServiceInstancesMutex.RUnlock()
	return len(fake.getServiceInstancesArgsForCall)
}

func (fake *FakeCloudFoundryClient) GetServiceInstancesCalls(stub func(cf.GetInstancesFilter, *log.Logger) ([]cf.Instance, error)) {
	fake.getServiceInstancesMutex.Lock()
	defer fake.getServiceInstancesMutex.Unlock()
	fake.GetServiceInstancesStub = stub
}

func (fake *FakeCloudFoundryClient) GetServiceInstancesArgsForCall(i int) (cf.GetInstancesFilter, *log.Logger) {
	fake.getServiceInstancesMutex.RLock()
	defer fake.getServiceInstancesMutex.RUnlock()
	argsForCall := fake.getServiceInstancesArgsForCall[i]
	return argsForCall.arg1, argsForCall.arg2
}

func (fake *FakeCloudFoundryClient) GetServiceInstancesReturns(result1 []cf.Instance, result2 error) {
	fake.getServiceInstancesMutex.Lock()
	defer fake.getServiceInstancesMutex.Unlock()
	fake.GetServiceInstancesStub = nil
	fake.getServiceInstancesReturns = struct {
		result1 []cf.Instance
		result2 error
	}{result1, result2}
}

func (fake *FakeCloudFoundryClient) GetServiceInstancesReturnsOnCall(i int, result1 []cf.Instance, result2 error) {
	fake.getServiceInstancesMutex.Lock()
	defer fake.getServiceInstancesMutex.Unlock()
	fake.GetServiceInstancesStub = nil
	if fake.getServiceInstancesReturnsOnCall == nil {
		fake.getServiceInstancesReturnsOnCall = make(map[int]struct {
			result1 []cf.Instance
			result2 error
		})
	}
	fake.getServiceInstancesReturnsOnCall[i] = struct {
		result1 []cf.Instance
		result2 error
	}{result1, result2}
}

func (fake *FakeCloudFoundryClient) Invocations() map[string][][]interface{} {
	fake.invocationsMutex.RLock()
	defer fake.invocationsMutex.RUnlock()
	fake.countInstancesOfPlanMutex.RLock()
	defer fake.countInstancesOfPlanMutex.RUnlock()
	fake.countInstancesOfServiceOfferingMutex.RLock()
	defer fake.countInstancesOfServiceOfferingMutex.RUnlock()
	fake.getAPIVersionMutex.RLock()
	defer fake.getAPIVersionMutex.RUnlock()
	fake.getServiceInstancesMutex.RLock()
	defer fake.getServiceInstancesMutex.RUnlock()
	copiedInvocations := map[string][][]interface{}{}
	for key, value := range fake.invocations {
		copiedInvocations[key] = value
	}
	return copiedInvocations
}

func (fake *FakeCloudFoundryClient) recordInvocation(key string, args []interface{}) {
	fake.invocationsMutex.Lock()
	defer fake.invocationsMutex.Unlock()
	if fake.invocations == nil {
		fake.invocations = map[string][][]interface{}{}
	}
	if fake.invocations[key] == nil {
		fake.invocations[key] = [][]interface{}{}
	}
	fake.invocations[key] = append(fake.invocations[key], args)
}

var _ broker.CloudFoundryClient = new(FakeCloudFoundryClient)

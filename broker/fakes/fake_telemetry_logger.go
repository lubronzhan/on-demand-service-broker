// Code generated by counterfeiter. DO NOT EDIT.
package fakes

import (
	"sync"

	"github.com/lubronzhan/on-demand-service-broker/broker"
	"github.com/lubronzhan/on-demand-service-broker/service"
)

type FakeTelemetryLogger struct {
	LogInstancesStub        func(service.InstanceLister, string, string)
	logInstancesMutex       sync.RWMutex
	logInstancesArgsForCall []struct {
		arg1 service.InstanceLister
		arg2 string
		arg3 string
	}
	invocations      map[string][][]interface{}
	invocationsMutex sync.RWMutex
}

func (fake *FakeTelemetryLogger) LogInstances(arg1 service.InstanceLister, arg2 string, arg3 string) {
	fake.logInstancesMutex.Lock()
	fake.logInstancesArgsForCall = append(fake.logInstancesArgsForCall, struct {
		arg1 service.InstanceLister
		arg2 string
		arg3 string
	}{arg1, arg2, arg3})
	fake.recordInvocation("LogInstances", []interface{}{arg1, arg2, arg3})
	fake.logInstancesMutex.Unlock()
	if fake.LogInstancesStub != nil {
		fake.LogInstancesStub(arg1, arg2, arg3)
	}
}

func (fake *FakeTelemetryLogger) LogInstancesCallCount() int {
	fake.logInstancesMutex.RLock()
	defer fake.logInstancesMutex.RUnlock()
	return len(fake.logInstancesArgsForCall)
}

func (fake *FakeTelemetryLogger) LogInstancesCalls(stub func(service.InstanceLister, string, string)) {
	fake.logInstancesMutex.Lock()
	defer fake.logInstancesMutex.Unlock()
	fake.LogInstancesStub = stub
}

func (fake *FakeTelemetryLogger) LogInstancesArgsForCall(i int) (service.InstanceLister, string, string) {
	fake.logInstancesMutex.RLock()
	defer fake.logInstancesMutex.RUnlock()
	argsForCall := fake.logInstancesArgsForCall[i]
	return argsForCall.arg1, argsForCall.arg2, argsForCall.arg3
}

func (fake *FakeTelemetryLogger) Invocations() map[string][][]interface{} {
	fake.invocationsMutex.RLock()
	defer fake.invocationsMutex.RUnlock()
	fake.logInstancesMutex.RLock()
	defer fake.logInstancesMutex.RUnlock()
	copiedInvocations := map[string][][]interface{}{}
	for key, value := range fake.invocations {
		copiedInvocations[key] = value
	}
	return copiedInvocations
}

func (fake *FakeTelemetryLogger) recordInvocation(key string, args []interface{}) {
	fake.invocationsMutex.Lock()
	defer fake.invocationsMutex.Unlock()
	if fake.invocations == nil {
		fake.invocations = map[string][][]interface{}{}
	}
	if fake.invocations[key] == nil {
		fake.invocations[key] = [][]interface{}{}
	}
	fake.invocations[key] = append(fake.invocations[key], args)
}

var _ broker.TelemetryLogger = new(FakeTelemetryLogger)

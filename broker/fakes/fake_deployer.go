// Code generated by counterfeiter. DO NOT EDIT.
package fakes

import (
	"log"
	"sync"

	"github.com/lubronzhan/on-demand-service-broker/broker"
	"github.com/lubronzhan/on-demand-service-broker/config"
)

type FakeDeployer struct {
	CreateStub        func(string, string, map[string]interface{}, string, map[string]string, *log.Logger) (int, []byte, error)
	createMutex       sync.RWMutex
	createArgsForCall []struct {
		arg1 string
		arg2 string
		arg3 map[string]interface{}
		arg4 string
		arg5 map[string]string
		arg6 *log.Logger
	}
	createReturns struct {
		result1 int
		result2 []byte
		result3 error
	}
	createReturnsOnCall map[int]struct {
		result1 int
		result2 []byte
		result3 error
	}
	RecreateStub        func(string, string, string, *log.Logger) (int, error)
	recreateMutex       sync.RWMutex
	recreateArgsForCall []struct {
		arg1 string
		arg2 string
		arg3 string
		arg4 *log.Logger
	}
	recreateReturns struct {
		result1 int
		result2 error
	}
	recreateReturnsOnCall map[int]struct {
		result1 int
		result2 error
	}
	UpdateStub        func(string, string, map[string]interface{}, *string, string, map[string]string, map[string]string, *log.Logger) (int, []byte, error)
	updateMutex       sync.RWMutex
	updateArgsForCall []struct {
		arg1 string
		arg2 string
		arg3 map[string]interface{}
		arg4 *string
		arg5 string
		arg6 map[string]string
		arg7 map[string]string
		arg8 *log.Logger
	}
	updateReturns struct {
		result1 int
		result2 []byte
		result3 error
	}
	updateReturnsOnCall map[int]struct {
		result1 int
		result2 []byte
		result3 error
	}
	UpgradeStub        func(string, config.Plan, map[string]interface{}, string, map[string]string, *log.Logger) (int, []byte, error)
	upgradeMutex       sync.RWMutex
	upgradeArgsForCall []struct {
		arg1 string
		arg2 config.Plan
		arg3 map[string]interface{}
		arg4 string
		arg5 map[string]string
		arg6 *log.Logger
	}
	upgradeReturns struct {
		result1 int
		result2 []byte
		result3 error
	}
	upgradeReturnsOnCall map[int]struct {
		result1 int
		result2 []byte
		result3 error
	}
	invocations      map[string][][]interface{}
	invocationsMutex sync.RWMutex
}

func (fake *FakeDeployer) Create(arg1 string, arg2 string, arg3 map[string]interface{}, arg4 string, arg5 map[string]string, arg6 *log.Logger) (int, []byte, error) {
	fake.createMutex.Lock()
	ret, specificReturn := fake.createReturnsOnCall[len(fake.createArgsForCall)]
	fake.createArgsForCall = append(fake.createArgsForCall, struct {
		arg1 string
		arg2 string
		arg3 map[string]interface{}
		arg4 string
		arg5 map[string]string
		arg6 *log.Logger
	}{arg1, arg2, arg3, arg4, arg5, arg6})
	fake.recordInvocation("Create", []interface{}{arg1, arg2, arg3, arg4, arg5, arg6})
	fake.createMutex.Unlock()
	if fake.CreateStub != nil {
		return fake.CreateStub(arg1, arg2, arg3, arg4, arg5, arg6)
	}
	if specificReturn {
		return ret.result1, ret.result2, ret.result3
	}
	fakeReturns := fake.createReturns
	return fakeReturns.result1, fakeReturns.result2, fakeReturns.result3
}

func (fake *FakeDeployer) CreateCallCount() int {
	fake.createMutex.RLock()
	defer fake.createMutex.RUnlock()
	return len(fake.createArgsForCall)
}

func (fake *FakeDeployer) CreateCalls(stub func(string, string, map[string]interface{}, string, map[string]string, *log.Logger) (int, []byte, error)) {
	fake.createMutex.Lock()
	defer fake.createMutex.Unlock()
	fake.CreateStub = stub
}

func (fake *FakeDeployer) CreateArgsForCall(i int) (string, string, map[string]interface{}, string, map[string]string, *log.Logger) {
	fake.createMutex.RLock()
	defer fake.createMutex.RUnlock()
	argsForCall := fake.createArgsForCall[i]
	return argsForCall.arg1, argsForCall.arg2, argsForCall.arg3, argsForCall.arg4, argsForCall.arg5, argsForCall.arg6
}

func (fake *FakeDeployer) CreateReturns(result1 int, result2 []byte, result3 error) {
	fake.createMutex.Lock()
	defer fake.createMutex.Unlock()
	fake.CreateStub = nil
	fake.createReturns = struct {
		result1 int
		result2 []byte
		result3 error
	}{result1, result2, result3}
}

func (fake *FakeDeployer) CreateReturnsOnCall(i int, result1 int, result2 []byte, result3 error) {
	fake.createMutex.Lock()
	defer fake.createMutex.Unlock()
	fake.CreateStub = nil
	if fake.createReturnsOnCall == nil {
		fake.createReturnsOnCall = make(map[int]struct {
			result1 int
			result2 []byte
			result3 error
		})
	}
	fake.createReturnsOnCall[i] = struct {
		result1 int
		result2 []byte
		result3 error
	}{result1, result2, result3}
}

func (fake *FakeDeployer) Recreate(arg1 string, arg2 string, arg3 string, arg4 *log.Logger) (int, error) {
	fake.recreateMutex.Lock()
	ret, specificReturn := fake.recreateReturnsOnCall[len(fake.recreateArgsForCall)]
	fake.recreateArgsForCall = append(fake.recreateArgsForCall, struct {
		arg1 string
		arg2 string
		arg3 string
		arg4 *log.Logger
	}{arg1, arg2, arg3, arg4})
	fake.recordInvocation("Recreate", []interface{}{arg1, arg2, arg3, arg4})
	fake.recreateMutex.Unlock()
	if fake.RecreateStub != nil {
		return fake.RecreateStub(arg1, arg2, arg3, arg4)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	fakeReturns := fake.recreateReturns
	return fakeReturns.result1, fakeReturns.result2
}

func (fake *FakeDeployer) RecreateCallCount() int {
	fake.recreateMutex.RLock()
	defer fake.recreateMutex.RUnlock()
	return len(fake.recreateArgsForCall)
}

func (fake *FakeDeployer) RecreateCalls(stub func(string, string, string, *log.Logger) (int, error)) {
	fake.recreateMutex.Lock()
	defer fake.recreateMutex.Unlock()
	fake.RecreateStub = stub
}

func (fake *FakeDeployer) RecreateArgsForCall(i int) (string, string, string, *log.Logger) {
	fake.recreateMutex.RLock()
	defer fake.recreateMutex.RUnlock()
	argsForCall := fake.recreateArgsForCall[i]
	return argsForCall.arg1, argsForCall.arg2, argsForCall.arg3, argsForCall.arg4
}

func (fake *FakeDeployer) RecreateReturns(result1 int, result2 error) {
	fake.recreateMutex.Lock()
	defer fake.recreateMutex.Unlock()
	fake.RecreateStub = nil
	fake.recreateReturns = struct {
		result1 int
		result2 error
	}{result1, result2}
}

func (fake *FakeDeployer) RecreateReturnsOnCall(i int, result1 int, result2 error) {
	fake.recreateMutex.Lock()
	defer fake.recreateMutex.Unlock()
	fake.RecreateStub = nil
	if fake.recreateReturnsOnCall == nil {
		fake.recreateReturnsOnCall = make(map[int]struct {
			result1 int
			result2 error
		})
	}
	fake.recreateReturnsOnCall[i] = struct {
		result1 int
		result2 error
	}{result1, result2}
}

func (fake *FakeDeployer) Update(arg1 string, arg2 string, arg3 map[string]interface{}, arg4 *string, arg5 string, arg6 map[string]string, arg7 map[string]string, arg8 *log.Logger) (int, []byte, error) {
	fake.updateMutex.Lock()
	ret, specificReturn := fake.updateReturnsOnCall[len(fake.updateArgsForCall)]
	fake.updateArgsForCall = append(fake.updateArgsForCall, struct {
		arg1 string
		arg2 string
		arg3 map[string]interface{}
		arg4 *string
		arg5 string
		arg6 map[string]string
		arg7 map[string]string
		arg8 *log.Logger
	}{arg1, arg2, arg3, arg4, arg5, arg6, arg7, arg8})
	fake.recordInvocation("Update", []interface{}{arg1, arg2, arg3, arg4, arg5, arg6, arg7, arg8})
	fake.updateMutex.Unlock()
	if fake.UpdateStub != nil {
		return fake.UpdateStub(arg1, arg2, arg3, arg4, arg5, arg6, arg7, arg8)
	}
	if specificReturn {
		return ret.result1, ret.result2, ret.result3
	}
	fakeReturns := fake.updateReturns
	return fakeReturns.result1, fakeReturns.result2, fakeReturns.result3
}

func (fake *FakeDeployer) UpdateCallCount() int {
	fake.updateMutex.RLock()
	defer fake.updateMutex.RUnlock()
	return len(fake.updateArgsForCall)
}

func (fake *FakeDeployer) UpdateCalls(stub func(string, string, map[string]interface{}, *string, string, map[string]string, map[string]string, *log.Logger) (int, []byte, error)) {
	fake.updateMutex.Lock()
	defer fake.updateMutex.Unlock()
	fake.UpdateStub = stub
}

func (fake *FakeDeployer) UpdateArgsForCall(i int) (string, string, map[string]interface{}, *string, string, map[string]string, map[string]string, *log.Logger) {
	fake.updateMutex.RLock()
	defer fake.updateMutex.RUnlock()
	argsForCall := fake.updateArgsForCall[i]
	return argsForCall.arg1, argsForCall.arg2, argsForCall.arg3, argsForCall.arg4, argsForCall.arg5, argsForCall.arg6, argsForCall.arg7, argsForCall.arg8
}

func (fake *FakeDeployer) UpdateReturns(result1 int, result2 []byte, result3 error) {
	fake.updateMutex.Lock()
	defer fake.updateMutex.Unlock()
	fake.UpdateStub = nil
	fake.updateReturns = struct {
		result1 int
		result2 []byte
		result3 error
	}{result1, result2, result3}
}

func (fake *FakeDeployer) UpdateReturnsOnCall(i int, result1 int, result2 []byte, result3 error) {
	fake.updateMutex.Lock()
	defer fake.updateMutex.Unlock()
	fake.UpdateStub = nil
	if fake.updateReturnsOnCall == nil {
		fake.updateReturnsOnCall = make(map[int]struct {
			result1 int
			result2 []byte
			result3 error
		})
	}
	fake.updateReturnsOnCall[i] = struct {
		result1 int
		result2 []byte
		result3 error
	}{result1, result2, result3}
}

func (fake *FakeDeployer) Upgrade(arg1 string, arg2 config.Plan, arg3 map[string]interface{}, arg4 string, arg5 map[string]string, arg6 *log.Logger) (int, []byte, error) {
	fake.upgradeMutex.Lock()
	ret, specificReturn := fake.upgradeReturnsOnCall[len(fake.upgradeArgsForCall)]
	fake.upgradeArgsForCall = append(fake.upgradeArgsForCall, struct {
		arg1 string
		arg2 config.Plan
		arg3 map[string]interface{}
		arg4 string
		arg5 map[string]string
		arg6 *log.Logger
	}{arg1, arg2, arg3, arg4, arg5, arg6})
	fake.recordInvocation("Upgrade", []interface{}{arg1, arg2, arg3, arg4, arg5, arg6})
	fake.upgradeMutex.Unlock()
	if fake.UpgradeStub != nil {
		return fake.UpgradeStub(arg1, arg2, arg3, arg4, arg5, arg6)
	}
	if specificReturn {
		return ret.result1, ret.result2, ret.result3
	}
	fakeReturns := fake.upgradeReturns
	return fakeReturns.result1, fakeReturns.result2, fakeReturns.result3
}

func (fake *FakeDeployer) UpgradeCallCount() int {
	fake.upgradeMutex.RLock()
	defer fake.upgradeMutex.RUnlock()
	return len(fake.upgradeArgsForCall)
}

func (fake *FakeDeployer) UpgradeCalls(stub func(string, config.Plan, map[string]interface{}, string, map[string]string, *log.Logger) (int, []byte, error)) {
	fake.upgradeMutex.Lock()
	defer fake.upgradeMutex.Unlock()
	fake.UpgradeStub = stub
}

func (fake *FakeDeployer) UpgradeArgsForCall(i int) (string, config.Plan, map[string]interface{}, string, map[string]string, *log.Logger) {
	fake.upgradeMutex.RLock()
	defer fake.upgradeMutex.RUnlock()
	argsForCall := fake.upgradeArgsForCall[i]
	return argsForCall.arg1, argsForCall.arg2, argsForCall.arg3, argsForCall.arg4, argsForCall.arg5, argsForCall.arg6
}

func (fake *FakeDeployer) UpgradeReturns(result1 int, result2 []byte, result3 error) {
	fake.upgradeMutex.Lock()
	defer fake.upgradeMutex.Unlock()
	fake.UpgradeStub = nil
	fake.upgradeReturns = struct {
		result1 int
		result2 []byte
		result3 error
	}{result1, result2, result3}
}

func (fake *FakeDeployer) UpgradeReturnsOnCall(i int, result1 int, result2 []byte, result3 error) {
	fake.upgradeMutex.Lock()
	defer fake.upgradeMutex.Unlock()
	fake.UpgradeStub = nil
	if fake.upgradeReturnsOnCall == nil {
		fake.upgradeReturnsOnCall = make(map[int]struct {
			result1 int
			result2 []byte
			result3 error
		})
	}
	fake.upgradeReturnsOnCall[i] = struct {
		result1 int
		result2 []byte
		result3 error
	}{result1, result2, result3}
}

func (fake *FakeDeployer) Invocations() map[string][][]interface{} {
	fake.invocationsMutex.RLock()
	defer fake.invocationsMutex.RUnlock()
	fake.createMutex.RLock()
	defer fake.createMutex.RUnlock()
	fake.recreateMutex.RLock()
	defer fake.recreateMutex.RUnlock()
	fake.updateMutex.RLock()
	defer fake.updateMutex.RUnlock()
	fake.upgradeMutex.RLock()
	defer fake.upgradeMutex.RUnlock()
	copiedInvocations := map[string][][]interface{}{}
	for key, value := range fake.invocations {
		copiedInvocations[key] = value
	}
	return copiedInvocations
}

func (fake *FakeDeployer) recordInvocation(key string, args []interface{}) {
	fake.invocationsMutex.Lock()
	defer fake.invocationsMutex.Unlock()
	if fake.invocations == nil {
		fake.invocations = map[string][][]interface{}{}
	}
	if fake.invocations[key] == nil {
		fake.invocations[key] = [][]interface{}{}
	}
	fake.invocations[key] = append(fake.invocations[key], args)
}

var _ broker.Deployer = new(FakeDeployer)

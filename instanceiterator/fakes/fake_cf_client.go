// Code generated by counterfeiter. DO NOT EDIT.
package fakes

import (
	"log"
	"sync"

	"github.com/lubronzhan/on-demand-service-broker/cf"
	"github.com/lubronzhan/on-demand-service-broker/instanceiterator"
)

type FakeCFClient struct {
	CheckMinimumOSBAPIVersionStub        func(string, *log.Logger) bool
	checkMinimumOSBAPIVersionMutex       sync.RWMutex
	checkMinimumOSBAPIVersionArgsForCall []struct {
		arg1 string
		arg2 *log.Logger
	}
	checkMinimumOSBAPIVersionReturns struct {
		result1 bool
	}
	checkMinimumOSBAPIVersionReturnsOnCall map[int]struct {
		result1 bool
	}
	GetLastOperationForInstanceStub        func(string, *log.Logger) (cf.LastOperation, error)
	getLastOperationForInstanceMutex       sync.RWMutex
	getLastOperationForInstanceArgsForCall []struct {
		arg1 string
		arg2 *log.Logger
	}
	getLastOperationForInstanceReturns struct {
		result1 cf.LastOperation
		result2 error
	}
	getLastOperationForInstanceReturnsOnCall map[int]struct {
		result1 cf.LastOperation
		result2 error
	}
	GetPlanByServiceInstanceGUIDStub        func(string, *log.Logger) (cf.ServicePlan, error)
	getPlanByServiceInstanceGUIDMutex       sync.RWMutex
	getPlanByServiceInstanceGUIDArgsForCall []struct {
		arg1 string
		arg2 *log.Logger
	}
	getPlanByServiceInstanceGUIDReturns struct {
		result1 cf.ServicePlan
		result2 error
	}
	getPlanByServiceInstanceGUIDReturnsOnCall map[int]struct {
		result1 cf.ServicePlan
		result2 error
	}
	GetServiceInstanceStub        func(string, *log.Logger) (cf.ServiceInstanceResource, error)
	getServiceInstanceMutex       sync.RWMutex
	getServiceInstanceArgsForCall []struct {
		arg1 string
		arg2 *log.Logger
	}
	getServiceInstanceReturns struct {
		result1 cf.ServiceInstanceResource
		result2 error
	}
	getServiceInstanceReturnsOnCall map[int]struct {
		result1 cf.ServiceInstanceResource
		result2 error
	}
	UpgradeServiceInstanceStub        func(string, cf.MaintenanceInfo, *log.Logger) (cf.LastOperation, error)
	upgradeServiceInstanceMutex       sync.RWMutex
	upgradeServiceInstanceArgsForCall []struct {
		arg1 string
		arg2 cf.MaintenanceInfo
		arg3 *log.Logger
	}
	upgradeServiceInstanceReturns struct {
		result1 cf.LastOperation
		result2 error
	}
	upgradeServiceInstanceReturnsOnCall map[int]struct {
		result1 cf.LastOperation
		result2 error
	}
	invocations      map[string][][]interface{}
	invocationsMutex sync.RWMutex
}

func (fake *FakeCFClient) CheckMinimumOSBAPIVersion(arg1 string, arg2 *log.Logger) bool {
	fake.checkMinimumOSBAPIVersionMutex.Lock()
	ret, specificReturn := fake.checkMinimumOSBAPIVersionReturnsOnCall[len(fake.checkMinimumOSBAPIVersionArgsForCall)]
	fake.checkMinimumOSBAPIVersionArgsForCall = append(fake.checkMinimumOSBAPIVersionArgsForCall, struct {
		arg1 string
		arg2 *log.Logger
	}{arg1, arg2})
	fake.recordInvocation("CheckMinimumOSBAPIVersion", []interface{}{arg1, arg2})
	fake.checkMinimumOSBAPIVersionMutex.Unlock()
	if fake.CheckMinimumOSBAPIVersionStub != nil {
		return fake.CheckMinimumOSBAPIVersionStub(arg1, arg2)
	}
	if specificReturn {
		return ret.result1
	}
	fakeReturns := fake.checkMinimumOSBAPIVersionReturns
	return fakeReturns.result1
}

func (fake *FakeCFClient) CheckMinimumOSBAPIVersionCallCount() int {
	fake.checkMinimumOSBAPIVersionMutex.RLock()
	defer fake.checkMinimumOSBAPIVersionMutex.RUnlock()
	return len(fake.checkMinimumOSBAPIVersionArgsForCall)
}

func (fake *FakeCFClient) CheckMinimumOSBAPIVersionCalls(stub func(string, *log.Logger) bool) {
	fake.checkMinimumOSBAPIVersionMutex.Lock()
	defer fake.checkMinimumOSBAPIVersionMutex.Unlock()
	fake.CheckMinimumOSBAPIVersionStub = stub
}

func (fake *FakeCFClient) CheckMinimumOSBAPIVersionArgsForCall(i int) (string, *log.Logger) {
	fake.checkMinimumOSBAPIVersionMutex.RLock()
	defer fake.checkMinimumOSBAPIVersionMutex.RUnlock()
	argsForCall := fake.checkMinimumOSBAPIVersionArgsForCall[i]
	return argsForCall.arg1, argsForCall.arg2
}

func (fake *FakeCFClient) CheckMinimumOSBAPIVersionReturns(result1 bool) {
	fake.checkMinimumOSBAPIVersionMutex.Lock()
	defer fake.checkMinimumOSBAPIVersionMutex.Unlock()
	fake.CheckMinimumOSBAPIVersionStub = nil
	fake.checkMinimumOSBAPIVersionReturns = struct {
		result1 bool
	}{result1}
}

func (fake *FakeCFClient) CheckMinimumOSBAPIVersionReturnsOnCall(i int, result1 bool) {
	fake.checkMinimumOSBAPIVersionMutex.Lock()
	defer fake.checkMinimumOSBAPIVersionMutex.Unlock()
	fake.CheckMinimumOSBAPIVersionStub = nil
	if fake.checkMinimumOSBAPIVersionReturnsOnCall == nil {
		fake.checkMinimumOSBAPIVersionReturnsOnCall = make(map[int]struct {
			result1 bool
		})
	}
	fake.checkMinimumOSBAPIVersionReturnsOnCall[i] = struct {
		result1 bool
	}{result1}
}

func (fake *FakeCFClient) GetLastOperationForInstance(arg1 string, arg2 *log.Logger) (cf.LastOperation, error) {
	fake.getLastOperationForInstanceMutex.Lock()
	ret, specificReturn := fake.getLastOperationForInstanceReturnsOnCall[len(fake.getLastOperationForInstanceArgsForCall)]
	fake.getLastOperationForInstanceArgsForCall = append(fake.getLastOperationForInstanceArgsForCall, struct {
		arg1 string
		arg2 *log.Logger
	}{arg1, arg2})
	fake.recordInvocation("GetLastOperationForInstance", []interface{}{arg1, arg2})
	fake.getLastOperationForInstanceMutex.Unlock()
	if fake.GetLastOperationForInstanceStub != nil {
		return fake.GetLastOperationForInstanceStub(arg1, arg2)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	fakeReturns := fake.getLastOperationForInstanceReturns
	return fakeReturns.result1, fakeReturns.result2
}

func (fake *FakeCFClient) GetLastOperationForInstanceCallCount() int {
	fake.getLastOperationForInstanceMutex.RLock()
	defer fake.getLastOperationForInstanceMutex.RUnlock()
	return len(fake.getLastOperationForInstanceArgsForCall)
}

func (fake *FakeCFClient) GetLastOperationForInstanceCalls(stub func(string, *log.Logger) (cf.LastOperation, error)) {
	fake.getLastOperationForInstanceMutex.Lock()
	defer fake.getLastOperationForInstanceMutex.Unlock()
	fake.GetLastOperationForInstanceStub = stub
}

func (fake *FakeCFClient) GetLastOperationForInstanceArgsForCall(i int) (string, *log.Logger) {
	fake.getLastOperationForInstanceMutex.RLock()
	defer fake.getLastOperationForInstanceMutex.RUnlock()
	argsForCall := fake.getLastOperationForInstanceArgsForCall[i]
	return argsForCall.arg1, argsForCall.arg2
}

func (fake *FakeCFClient) GetLastOperationForInstanceReturns(result1 cf.LastOperation, result2 error) {
	fake.getLastOperationForInstanceMutex.Lock()
	defer fake.getLastOperationForInstanceMutex.Unlock()
	fake.GetLastOperationForInstanceStub = nil
	fake.getLastOperationForInstanceReturns = struct {
		result1 cf.LastOperation
		result2 error
	}{result1, result2}
}

func (fake *FakeCFClient) GetLastOperationForInstanceReturnsOnCall(i int, result1 cf.LastOperation, result2 error) {
	fake.getLastOperationForInstanceMutex.Lock()
	defer fake.getLastOperationForInstanceMutex.Unlock()
	fake.GetLastOperationForInstanceStub = nil
	if fake.getLastOperationForInstanceReturnsOnCall == nil {
		fake.getLastOperationForInstanceReturnsOnCall = make(map[int]struct {
			result1 cf.LastOperation
			result2 error
		})
	}
	fake.getLastOperationForInstanceReturnsOnCall[i] = struct {
		result1 cf.LastOperation
		result2 error
	}{result1, result2}
}

func (fake *FakeCFClient) GetPlanByServiceInstanceGUID(arg1 string, arg2 *log.Logger) (cf.ServicePlan, error) {
	fake.getPlanByServiceInstanceGUIDMutex.Lock()
	ret, specificReturn := fake.getPlanByServiceInstanceGUIDReturnsOnCall[len(fake.getPlanByServiceInstanceGUIDArgsForCall)]
	fake.getPlanByServiceInstanceGUIDArgsForCall = append(fake.getPlanByServiceInstanceGUIDArgsForCall, struct {
		arg1 string
		arg2 *log.Logger
	}{arg1, arg2})
	fake.recordInvocation("GetPlanByServiceInstanceGUID", []interface{}{arg1, arg2})
	fake.getPlanByServiceInstanceGUIDMutex.Unlock()
	if fake.GetPlanByServiceInstanceGUIDStub != nil {
		return fake.GetPlanByServiceInstanceGUIDStub(arg1, arg2)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	fakeReturns := fake.getPlanByServiceInstanceGUIDReturns
	return fakeReturns.result1, fakeReturns.result2
}

func (fake *FakeCFClient) GetPlanByServiceInstanceGUIDCallCount() int {
	fake.getPlanByServiceInstanceGUIDMutex.RLock()
	defer fake.getPlanByServiceInstanceGUIDMutex.RUnlock()
	return len(fake.getPlanByServiceInstanceGUIDArgsForCall)
}

func (fake *FakeCFClient) GetPlanByServiceInstanceGUIDCalls(stub func(string, *log.Logger) (cf.ServicePlan, error)) {
	fake.getPlanByServiceInstanceGUIDMutex.Lock()
	defer fake.getPlanByServiceInstanceGUIDMutex.Unlock()
	fake.GetPlanByServiceInstanceGUIDStub = stub
}

func (fake *FakeCFClient) GetPlanByServiceInstanceGUIDArgsForCall(i int) (string, *log.Logger) {
	fake.getPlanByServiceInstanceGUIDMutex.RLock()
	defer fake.getPlanByServiceInstanceGUIDMutex.RUnlock()
	argsForCall := fake.getPlanByServiceInstanceGUIDArgsForCall[i]
	return argsForCall.arg1, argsForCall.arg2
}

func (fake *FakeCFClient) GetPlanByServiceInstanceGUIDReturns(result1 cf.ServicePlan, result2 error) {
	fake.getPlanByServiceInstanceGUIDMutex.Lock()
	defer fake.getPlanByServiceInstanceGUIDMutex.Unlock()
	fake.GetPlanByServiceInstanceGUIDStub = nil
	fake.getPlanByServiceInstanceGUIDReturns = struct {
		result1 cf.ServicePlan
		result2 error
	}{result1, result2}
}

func (fake *FakeCFClient) GetPlanByServiceInstanceGUIDReturnsOnCall(i int, result1 cf.ServicePlan, result2 error) {
	fake.getPlanByServiceInstanceGUIDMutex.Lock()
	defer fake.getPlanByServiceInstanceGUIDMutex.Unlock()
	fake.GetPlanByServiceInstanceGUIDStub = nil
	if fake.getPlanByServiceInstanceGUIDReturnsOnCall == nil {
		fake.getPlanByServiceInstanceGUIDReturnsOnCall = make(map[int]struct {
			result1 cf.ServicePlan
			result2 error
		})
	}
	fake.getPlanByServiceInstanceGUIDReturnsOnCall[i] = struct {
		result1 cf.ServicePlan
		result2 error
	}{result1, result2}
}

func (fake *FakeCFClient) GetServiceInstance(arg1 string, arg2 *log.Logger) (cf.ServiceInstanceResource, error) {
	fake.getServiceInstanceMutex.Lock()
	ret, specificReturn := fake.getServiceInstanceReturnsOnCall[len(fake.getServiceInstanceArgsForCall)]
	fake.getServiceInstanceArgsForCall = append(fake.getServiceInstanceArgsForCall, struct {
		arg1 string
		arg2 *log.Logger
	}{arg1, arg2})
	fake.recordInvocation("GetServiceInstance", []interface{}{arg1, arg2})
	fake.getServiceInstanceMutex.Unlock()
	if fake.GetServiceInstanceStub != nil {
		return fake.GetServiceInstanceStub(arg1, arg2)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	fakeReturns := fake.getServiceInstanceReturns
	return fakeReturns.result1, fakeReturns.result2
}

func (fake *FakeCFClient) GetServiceInstanceCallCount() int {
	fake.getServiceInstanceMutex.RLock()
	defer fake.getServiceInstanceMutex.RUnlock()
	return len(fake.getServiceInstanceArgsForCall)
}

func (fake *FakeCFClient) GetServiceInstanceCalls(stub func(string, *log.Logger) (cf.ServiceInstanceResource, error)) {
	fake.getServiceInstanceMutex.Lock()
	defer fake.getServiceInstanceMutex.Unlock()
	fake.GetServiceInstanceStub = stub
}

func (fake *FakeCFClient) GetServiceInstanceArgsForCall(i int) (string, *log.Logger) {
	fake.getServiceInstanceMutex.RLock()
	defer fake.getServiceInstanceMutex.RUnlock()
	argsForCall := fake.getServiceInstanceArgsForCall[i]
	return argsForCall.arg1, argsForCall.arg2
}

func (fake *FakeCFClient) GetServiceInstanceReturns(result1 cf.ServiceInstanceResource, result2 error) {
	fake.getServiceInstanceMutex.Lock()
	defer fake.getServiceInstanceMutex.Unlock()
	fake.GetServiceInstanceStub = nil
	fake.getServiceInstanceReturns = struct {
		result1 cf.ServiceInstanceResource
		result2 error
	}{result1, result2}
}

func (fake *FakeCFClient) GetServiceInstanceReturnsOnCall(i int, result1 cf.ServiceInstanceResource, result2 error) {
	fake.getServiceInstanceMutex.Lock()
	defer fake.getServiceInstanceMutex.Unlock()
	fake.GetServiceInstanceStub = nil
	if fake.getServiceInstanceReturnsOnCall == nil {
		fake.getServiceInstanceReturnsOnCall = make(map[int]struct {
			result1 cf.ServiceInstanceResource
			result2 error
		})
	}
	fake.getServiceInstanceReturnsOnCall[i] = struct {
		result1 cf.ServiceInstanceResource
		result2 error
	}{result1, result2}
}

func (fake *FakeCFClient) UpgradeServiceInstance(arg1 string, arg2 cf.MaintenanceInfo, arg3 *log.Logger) (cf.LastOperation, error) {
	fake.upgradeServiceInstanceMutex.Lock()
	ret, specificReturn := fake.upgradeServiceInstanceReturnsOnCall[len(fake.upgradeServiceInstanceArgsForCall)]
	fake.upgradeServiceInstanceArgsForCall = append(fake.upgradeServiceInstanceArgsForCall, struct {
		arg1 string
		arg2 cf.MaintenanceInfo
		arg3 *log.Logger
	}{arg1, arg2, arg3})
	fake.recordInvocation("UpgradeServiceInstance", []interface{}{arg1, arg2, arg3})
	fake.upgradeServiceInstanceMutex.Unlock()
	if fake.UpgradeServiceInstanceStub != nil {
		return fake.UpgradeServiceInstanceStub(arg1, arg2, arg3)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	fakeReturns := fake.upgradeServiceInstanceReturns
	return fakeReturns.result1, fakeReturns.result2
}

func (fake *FakeCFClient) UpgradeServiceInstanceCallCount() int {
	fake.upgradeServiceInstanceMutex.RLock()
	defer fake.upgradeServiceInstanceMutex.RUnlock()
	return len(fake.upgradeServiceInstanceArgsForCall)
}

func (fake *FakeCFClient) UpgradeServiceInstanceCalls(stub func(string, cf.MaintenanceInfo, *log.Logger) (cf.LastOperation, error)) {
	fake.upgradeServiceInstanceMutex.Lock()
	defer fake.upgradeServiceInstanceMutex.Unlock()
	fake.UpgradeServiceInstanceStub = stub
}

func (fake *FakeCFClient) UpgradeServiceInstanceArgsForCall(i int) (string, cf.MaintenanceInfo, *log.Logger) {
	fake.upgradeServiceInstanceMutex.RLock()
	defer fake.upgradeServiceInstanceMutex.RUnlock()
	argsForCall := fake.upgradeServiceInstanceArgsForCall[i]
	return argsForCall.arg1, argsForCall.arg2, argsForCall.arg3
}

func (fake *FakeCFClient) UpgradeServiceInstanceReturns(result1 cf.LastOperation, result2 error) {
	fake.upgradeServiceInstanceMutex.Lock()
	defer fake.upgradeServiceInstanceMutex.Unlock()
	fake.UpgradeServiceInstanceStub = nil
	fake.upgradeServiceInstanceReturns = struct {
		result1 cf.LastOperation
		result2 error
	}{result1, result2}
}

func (fake *FakeCFClient) UpgradeServiceInstanceReturnsOnCall(i int, result1 cf.LastOperation, result2 error) {
	fake.upgradeServiceInstanceMutex.Lock()
	defer fake.upgradeServiceInstanceMutex.Unlock()
	fake.UpgradeServiceInstanceStub = nil
	if fake.upgradeServiceInstanceReturnsOnCall == nil {
		fake.upgradeServiceInstanceReturnsOnCall = make(map[int]struct {
			result1 cf.LastOperation
			result2 error
		})
	}
	fake.upgradeServiceInstanceReturnsOnCall[i] = struct {
		result1 cf.LastOperation
		result2 error
	}{result1, result2}
}

func (fake *FakeCFClient) Invocations() map[string][][]interface{} {
	fake.invocationsMutex.RLock()
	defer fake.invocationsMutex.RUnlock()
	fake.checkMinimumOSBAPIVersionMutex.RLock()
	defer fake.checkMinimumOSBAPIVersionMutex.RUnlock()
	fake.getLastOperationForInstanceMutex.RLock()
	defer fake.getLastOperationForInstanceMutex.RUnlock()
	fake.getPlanByServiceInstanceGUIDMutex.RLock()
	defer fake.getPlanByServiceInstanceGUIDMutex.RUnlock()
	fake.getServiceInstanceMutex.RLock()
	defer fake.getServiceInstanceMutex.RUnlock()
	fake.upgradeServiceInstanceMutex.RLock()
	defer fake.upgradeServiceInstanceMutex.RUnlock()
	copiedInvocations := map[string][][]interface{}{}
	for key, value := range fake.invocations {
		copiedInvocations[key] = value
	}
	return copiedInvocations
}

func (fake *FakeCFClient) recordInvocation(key string, args []interface{}) {
	fake.invocationsMutex.Lock()
	defer fake.invocationsMutex.Unlock()
	if fake.invocations == nil {
		fake.invocations = map[string][][]interface{}{}
	}
	if fake.invocations[key] == nil {
		fake.invocations[key] = [][]interface{}{}
	}
	fake.invocations[key] = append(fake.invocations[key], args)
}

var _ instanceiterator.CFClient = new(FakeCFClient)

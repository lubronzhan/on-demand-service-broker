// Code generated by counterfeiter. DO NOT EDIT.
package fakes

import (
	"log"
	"sync"

	"github.com/lubronzhan/on-demand-service-broker/purger"
)

type FakeCloudFoundryClient struct {
	DisableServiceAccessForAllPlansStub        func(string, *log.Logger) error
	disableServiceAccessForAllPlansMutex       sync.RWMutex
	disableServiceAccessForAllPlansArgsForCall []struct {
		arg1 string
		arg2 *log.Logger
	}
	disableServiceAccessForAllPlansReturns struct {
		result1 error
	}
	disableServiceAccessForAllPlansReturnsOnCall map[int]struct {
		result1 error
	}
	invocations      map[string][][]interface{}
	invocationsMutex sync.RWMutex
}

func (fake *FakeCloudFoundryClient) DisableServiceAccessForAllPlans(arg1 string, arg2 *log.Logger) error {
	fake.disableServiceAccessForAllPlansMutex.Lock()
	ret, specificReturn := fake.disableServiceAccessForAllPlansReturnsOnCall[len(fake.disableServiceAccessForAllPlansArgsForCall)]
	fake.disableServiceAccessForAllPlansArgsForCall = append(fake.disableServiceAccessForAllPlansArgsForCall, struct {
		arg1 string
		arg2 *log.Logger
	}{arg1, arg2})
	fake.recordInvocation("DisableServiceAccessForAllPlans", []interface{}{arg1, arg2})
	fake.disableServiceAccessForAllPlansMutex.Unlock()
	if fake.DisableServiceAccessForAllPlansStub != nil {
		return fake.DisableServiceAccessForAllPlansStub(arg1, arg2)
	}
	if specificReturn {
		return ret.result1
	}
	fakeReturns := fake.disableServiceAccessForAllPlansReturns
	return fakeReturns.result1
}

func (fake *FakeCloudFoundryClient) DisableServiceAccessForAllPlansCallCount() int {
	fake.disableServiceAccessForAllPlansMutex.RLock()
	defer fake.disableServiceAccessForAllPlansMutex.RUnlock()
	return len(fake.disableServiceAccessForAllPlansArgsForCall)
}

func (fake *FakeCloudFoundryClient) DisableServiceAccessForAllPlansCalls(stub func(string, *log.Logger) error) {
	fake.disableServiceAccessForAllPlansMutex.Lock()
	defer fake.disableServiceAccessForAllPlansMutex.Unlock()
	fake.DisableServiceAccessForAllPlansStub = stub
}

func (fake *FakeCloudFoundryClient) DisableServiceAccessForAllPlansArgsForCall(i int) (string, *log.Logger) {
	fake.disableServiceAccessForAllPlansMutex.RLock()
	defer fake.disableServiceAccessForAllPlansMutex.RUnlock()
	argsForCall := fake.disableServiceAccessForAllPlansArgsForCall[i]
	return argsForCall.arg1, argsForCall.arg2
}

func (fake *FakeCloudFoundryClient) DisableServiceAccessForAllPlansReturns(result1 error) {
	fake.disableServiceAccessForAllPlansMutex.Lock()
	defer fake.disableServiceAccessForAllPlansMutex.Unlock()
	fake.DisableServiceAccessForAllPlansStub = nil
	fake.disableServiceAccessForAllPlansReturns = struct {
		result1 error
	}{result1}
}

func (fake *FakeCloudFoundryClient) DisableServiceAccessForAllPlansReturnsOnCall(i int, result1 error) {
	fake.disableServiceAccessForAllPlansMutex.Lock()
	defer fake.disableServiceAccessForAllPlansMutex.Unlock()
	fake.DisableServiceAccessForAllPlansStub = nil
	if fake.disableServiceAccessForAllPlansReturnsOnCall == nil {
		fake.disableServiceAccessForAllPlansReturnsOnCall = make(map[int]struct {
			result1 error
		})
	}
	fake.disableServiceAccessForAllPlansReturnsOnCall[i] = struct {
		result1 error
	}{result1}
}

func (fake *FakeCloudFoundryClient) Invocations() map[string][][]interface{} {
	fake.invocationsMutex.RLock()
	defer fake.invocationsMutex.RUnlock()
	fake.disableServiceAccessForAllPlansMutex.RLock()
	defer fake.disableServiceAccessForAllPlansMutex.RUnlock()
	copiedInvocations := map[string][][]interface{}{}
	for key, value := range fake.invocations {
		copiedInvocations[key] = value
	}
	return copiedInvocations
}

func (fake *FakeCloudFoundryClient) recordInvocation(key string, args []interface{}) {
	fake.invocationsMutex.Lock()
	defer fake.invocationsMutex.Unlock()
	if fake.invocations == nil {
		fake.invocations = map[string][][]interface{}{}
	}
	if fake.invocations[key] == nil {
		fake.invocations[key] = [][]interface{}{}
	}
	fake.invocations[key] = append(fake.invocations[key], args)
}

var _ purger.CloudFoundryClient = new(FakeCloudFoundryClient)
